{
    "pipes": [],
    "interfaces": [
        {
            "name": "BarData",
            "id": "interface-BarData-274017ca3307800b00c0e193c60ff1fe16f8a043cb27a1dfae2f171a4767b4247a71b77b94449577f9f0350a0cf9d92b6b3eab6a69ef8741c6bb1e58a8573fa0",
            "file": "src/types/bar-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChartData, Plugin } from \"chart.js\";\r\ntype AnyObject = Record<string, any>;\r\n\r\nexport interface DataBarData {\r\n  amount: number;\r\n  amountUnit: string;\r\n  rate: number;\r\n}\r\n\r\nexport interface BarData {\r\n  label: string;\r\n  backgroundColor?: string;\r\n  data: DataBarData[];\r\n  stack?: number;\r\n}\r\nexport type BarPlugin = Plugin<\"bar\", AnyObject>;\r\nexport type BarChartData = ChartData<\"bar\", number[]>;\r\n",
            "properties": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataBarData[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "stack",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Chart",
            "id": "interface-Chart-1d9025f8060d10868ac7dbe5110d9d2fd5fdf1f3ff4a29ac069f0b65902cfa93eb033062b8797bb3c0ec73916eacb3b17621cdb6b7d5e59391a9c9e463e37dd2",
            "file": "src/services/chart-legend.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HTMLLegendPlugin } from \"../types/chart\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { PatternService } from \"./pattern.service\";\r\nimport { FormatUtilitiesService } from \"./format-utilities.service\";\r\nimport { ChartOptions } from \"chart.js\";\r\n\r\nexport const LEGEND_FONT_SIZE = 14;\r\nexport const LEGEND_LABEL_LEFT_MARGIN = \"6px\";\r\nexport const LEGEND_BOX_SIZE = \"22px\";\r\nexport const LEGEND_BOX_POINT_SIZE = 6;\r\nexport const LEGEND_BOX_BORDER = \"2px\";\r\n\r\nexport interface Chart {\r\n  update(): void;\r\n  toggleDataVisibility(datasetIndex: number): void;\r\n  isDatasetVisible(datasetIndex: number): boolean;\r\n  getDataVisibility(index: number): boolean;\r\n  setDatasetVisibility(datasetIndex: number, visible: boolean): void;\r\n  plugins: HTMLLegendPlugin;\r\n  options:\r\n    | ChartOptions<\"radar\">\r\n    | ChartOptions<\"doughnut\">\r\n    | ChartOptions<\"bar\">\r\n    | ChartOptions<\"line\">;\r\n  config: {\r\n    type?: string;\r\n    data: { labels: string[]; datasets: unknown[]; data?: unknown[] };\r\n  };\r\n}\r\n\r\nexport interface ChartItem {\r\n  fontColor: string;\r\n  hidden: boolean;\r\n  text: string;\r\n  fillStyle: string;\r\n  strokeStyle: string;\r\n  lineWidth: number;\r\n  datasetIndex: number;\r\n  index: number;\r\n  lineCap?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ChartLegendService {\r\n  constructor(\r\n    private readonly patternService: PatternService,\r\n    private readonly formatUtilitiesService: FormatUtilitiesService\r\n  ) {}\r\n\r\n  public getHtmlLegendPlugin(\r\n    legendContainer: BehaviorSubject<HTMLElement | null>,\r\n    selectMode: BehaviorSubject<boolean>,\r\n    onHoverIndex: BehaviorSubject<any>,\r\n    disableAccessibility: boolean,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    enableHoverFeature: boolean,\r\n    maxValueToDisplay?: number,\r\n    chartData?: any\r\n  ): HTMLLegendPlugin {\r\n    const chartLegendService = this;\r\n    return {\r\n      id: \"htmlLegend\",\r\n      afterUpdate(chart: any) {\r\n        const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n        const flexDirection = isDoughnut ? \"column\" : \"row\";\r\n        const ul: HTMLUListElement = chartLegendService.getOrCreateLegendList(\r\n          legendContainer,\r\n          flexDirection\r\n        );\r\n        ul.style.margin = \"1.375rem 1.0625rem\";\r\n        while (ul.firstChild) {\r\n          ul.firstChild.remove();\r\n        }\r\n        const items: ChartItem[] =\r\n          chart.options.plugins.legend.labels.generateLabels(chart);\r\n        items.forEach((item: ChartItem): void => {\r\n          const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n          const index: number = isDoughnut ? item.index : item.datasetIndex;\r\n          const li: HTMLElement =\r\n            chartLegendService.createHtmlLegendListElement(\r\n              chart,\r\n              selectMode,\r\n              index\r\n            );\r\n          if (isDoughnut) {\r\n            const isOthersElement: boolean = index + 1 === maxValueToDisplay;\r\n            li.style.marginTop = \"12px\";\r\n            if (isOthersElement) {\r\n              li.style.position = \"relative\";\r\n            }\r\n          } else {\r\n            li.style.marginRight = \"10px\";\r\n          }\r\n          li.style.width = \"max-content\";\r\n          li.style.cursor = \"pointer\";\r\n          let liContent: HTMLElement;\r\n          if (!selectMode.value) {\r\n            liContent = chartLegendService.createLegendElementWithPatterns(\r\n              item,\r\n              chart,\r\n              onHoverIndex,\r\n              disableAccessibility,\r\n              patternsColors,\r\n              patternsList,\r\n              enableHoverFeature\r\n            );\r\n          } else {\r\n            liContent = chartLegendService.createLegendElementWithCheckbox(\r\n              chart,\r\n              item,\r\n              selectMode,\r\n              onHoverIndex,\r\n              patternsColors,\r\n              enableHoverFeature\r\n            );\r\n          }\r\n          liContent.style.boxSizing = \"border-box\";\r\n          li.appendChild(liContent);\r\n          li.appendChild(chartLegendService.createHtmlLegendItemText(item));\r\n          if (\r\n            isDoughnut &&\r\n            maxValueToDisplay &&\r\n            chartLegendService.hasOthersTooltipToDisplay(\r\n              chartData,\r\n              maxValueToDisplay,\r\n              index\r\n            )\r\n          ) {\r\n            li.appendChild(\r\n              chartLegendService.createTooltipAndItsIcon(\r\n                chartData,\r\n                maxValueToDisplay\r\n              )\r\n            );\r\n          }\r\n          ul.appendChild(li);\r\n        });\r\n      },\r\n    };\r\n  }\r\n\r\n  public hasOthersTooltipToDisplay(\r\n    doughnutData: any,\r\n    maxValueToDisplay: number,\r\n    index: number\r\n  ) {\r\n    return (\r\n      doughnutData.data.length > maxValueToDisplay &&\r\n      index === maxValueToDisplay - 1\r\n    );\r\n  }\r\n\r\n  public getOrCreateLegendList(\r\n    legendContainer: BehaviorSubject<HTMLElement | null>,\r\n    flexDirection: string\r\n  ): HTMLUListElement {\r\n    let listContainer = legendContainer?.value?.querySelector(\"ul\");\r\n    if (!listContainer) {\r\n      listContainer = document.createElement(\"ul\");\r\n      listContainer.style.display = \"flex\";\r\n      listContainer.style.flexDirection = flexDirection;\r\n      listContainer.style.margin = \"0\";\r\n      listContainer.style.padding = \"0\";\r\n      legendContainer.value?.appendChild(listContainer);\r\n    }\r\n    return listContainer;\r\n  }\r\n\r\n  public createHtmlLegendListElement(\r\n    chart: Chart,\r\n    selectMode: BehaviorSubject<boolean>,\r\n    elementIndex: number\r\n  ) {\r\n    const li: HTMLElement = document.createElement(\"li\");\r\n    li.style.alignItems = \"center\";\r\n    li.style.cursor = selectMode.value ? \"\" : \"pointer\";\r\n    li.style.display = \"flex\";\r\n    li.style.flexDirection = \"row\";\r\n    li.setAttribute(\"data-test-id\", `legend-item-${elementIndex}`);\r\n    li.onclick = () => {\r\n      if (!selectMode.value) {\r\n        this.hideAllButThis(chart, elementIndex, selectMode);\r\n        chart.update();\r\n      } else {\r\n        this.switchItemVisibility(chart, elementIndex, selectMode);\r\n      }\r\n    };\r\n    return li;\r\n  }\r\n\r\n  public hideAllButThis(\r\n    chart: Chart,\r\n    elementIndex: number,\r\n    selectMode: BehaviorSubject<boolean>\r\n  ) {\r\n    if (!selectMode.value) {\r\n      const dataSets: unknown[] = this.getChartsData(chart);\r\n      selectMode.next(true);\r\n      dataSets.forEach((_data, index) => {\r\n        if (index !== elementIndex) {\r\n          this.switchItemVisibility(chart, index);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public switchItemVisibility(\r\n    chart: Chart,\r\n    elementIndex: number,\r\n    selectMode?: BehaviorSubject<boolean>\r\n  ): void {\r\n    if (this.isMonoDataSetChart(chart)) {\r\n      chart.toggleDataVisibility(elementIndex);\r\n    } else {\r\n      chart.setDatasetVisibility(\r\n        elementIndex,\r\n        !chart.isDatasetVisible(elementIndex)\r\n      );\r\n    }\r\n\r\n    if (selectMode && this.allDataVisible(chart)) {\r\n      selectMode.next(false);\r\n    }\r\n    chart.update();\r\n  }\r\n\r\n  public createLegendElementWithPatterns(\r\n    item: ChartItem,\r\n    chart: Chart,\r\n    onHoverIndex: BehaviorSubject<any>,\r\n    disableAccessibility: boolean,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    enableHoverFeature: boolean\r\n  ): HTMLElement {\r\n    const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n    const index: number = isDoughnut ? item.index : item.datasetIndex;\r\n    const img: HTMLImageElement = new Image();\r\n    const boxSpan: HTMLElement = this.createHtmlLegendLine(\r\n      item,\r\n      chart.config.type\r\n    );\r\n    const pattern: CanvasPattern = patternsList[index](\r\n      false,\r\n      patternsColors[index],\r\n      disableAccessibility\r\n    );\r\n    const patternCanvas: HTMLCanvasElement =\r\n      this.patternService.getPatternCanvas(pattern);\r\n    img.src = patternCanvas.toDataURL();\r\n    boxSpan.style.background = `url(${img.src})`;\r\n    boxSpan.style.backgroundSize = \"cover\";\r\n    boxSpan.style.borderColor = patternsColors[index];\r\n    boxSpan.style.borderWidth = LEGEND_BOX_BORDER;\r\n\r\n    if (enableHoverFeature) {\r\n      boxSpan.onmouseover = (): void => {\r\n        isDoughnut\r\n          ? onHoverIndex.next(index)\r\n          : onHoverIndex.next({\r\n              ...onHoverIndex.value,\r\n              dataSetIndex: index,\r\n            });\r\n      };\r\n      boxSpan.onmouseleave = (): void => {\r\n        onHoverIndex.next(null);\r\n      };\r\n    }\r\n    return boxSpan;\r\n  }\r\n\r\n  public createHtmlLegendLine(\r\n    item: ChartItem,\r\n    type: string | undefined\r\n  ): HTMLDivElement {\r\n    const boxSpan = document.createElement(\"div\");\r\n    if (type !== \"doughnut\") {\r\n      boxSpan.style.background = \"rgba(0, 0, 0, 0.1)\";\r\n      boxSpan.style.borderColor = item.strokeStyle;\r\n      boxSpan.style.borderWidth = LEGEND_BOX_BORDER;\r\n    }\r\n    boxSpan.style.borderRadius = \"5px\";\r\n    boxSpan.style.borderStyle = \"solid\";\r\n    boxSpan.style.display = \"flex\";\r\n    boxSpan.style.justifyContent = \"center\";\r\n    boxSpan.style.alignItems = \"center\";\r\n    boxSpan.style.minWidth = LEGEND_BOX_SIZE;\r\n    boxSpan.style.marginRight = LEGEND_LABEL_LEFT_MARGIN;\r\n    boxSpan.style.minHeight = LEGEND_BOX_SIZE;\r\n    return boxSpan;\r\n  }\r\n\r\n  public createLegendElementWithCheckbox(\r\n    chart: Chart,\r\n    item: ChartItem,\r\n    selectMode: BehaviorSubject<boolean>,\r\n    onHoverIndex: BehaviorSubject<any>,\r\n    patternsColors: string[],\r\n    enableHoverFeature: boolean\r\n  ): HTMLElement {\r\n    const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n    const index: number = isDoughnut ? item.index : item.datasetIndex;\r\n    const checkbox: HTMLElement = this.createLegendCheckbox(\r\n      chart,\r\n      item,\r\n      patternsColors\r\n    );\r\n    const labels = chart.config.data.labels;\r\n    const allCheckBoxesVisible: boolean = labels.every((_, index: number) =>\r\n      chart.getDataVisibility(index)\r\n    );\r\n    if (allCheckBoxesVisible) {\r\n      if (isDoughnut) {\r\n        selectMode.next(false);\r\n        onHoverIndex.next(-1);\r\n      }\r\n      return checkbox;\r\n    }\r\n    if (enableHoverFeature) {\r\n      checkbox.onmouseover = (): void => {\r\n        isDoughnut\r\n          ? onHoverIndex.next(index)\r\n          : onHoverIndex.next({\r\n              ...onHoverIndex.value,\r\n              dataSetIndex: index,\r\n            });\r\n        chart.update();\r\n      };\r\n      checkbox.onmouseleave = (): void => {\r\n        isDoughnut\r\n          ? onHoverIndex.next(null)\r\n          : onHoverIndex.next({\r\n              ...onHoverIndex.value,\r\n              dataSetIndex: -1,\r\n            });\r\n        chart.update();\r\n      };\r\n    }\r\n    return checkbox;\r\n  }\r\n\r\n  public createLegendCheckbox(\r\n    chart: Chart,\r\n    item: ChartItem,\r\n    patternsColors: string[]\r\n  ): any {\r\n    const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n    const index: number = isDoughnut ? item.index : item.datasetIndex;\r\n    const checkbox = document.createElement(\"input\");\r\n    checkbox.setAttribute(\"type\", \"checkbox\");\r\n    checkbox.setAttribute(\"data-test-id\", `legend-checkbox-${index}`);\r\n    const isDataSetVisible = this.isChartDataVisible(chart, index);\r\n    const patternColor = patternsColors ? patternsColors[index] : undefined;\r\n    this.addCheckboxStyle(\r\n      isDataSetVisible,\r\n      item,\r\n      checkbox,\r\n      patternColor as string\r\n    );\r\n    return checkbox;\r\n  }\r\n\r\n  public addCheckboxStyle(\r\n    isDataSetVisible: boolean,\r\n    item: ChartItem,\r\n    checkbox: Element,\r\n    patternColor: string\r\n  ): void {\r\n    let backgroundColor = \"#fff\";\r\n    let borderColor = \"#666\";\r\n    if (isDataSetVisible) {\r\n      //Default white for patterns chart\r\n      backgroundColor = this.isDefaultWhiteColor(item.strokeStyle)\r\n        ? patternColor\r\n        : item.strokeStyle;\r\n      borderColor = this.isDefaultWhiteColor(item.strokeStyle)\r\n        ? patternColor\r\n        : item.strokeStyle;\r\n      checkbox.setAttribute(\"checked\", \"\" + isDataSetVisible);\r\n    }\r\n    checkbox.setAttribute(\"class\", \"mc-checkbox__input\");\r\n    checkbox.setAttribute(\r\n      \"style\",\r\n      `background-color: ${backgroundColor};\r\n      min-width: ${LEGEND_BOX_SIZE};\r\n      min-height: ${LEGEND_BOX_SIZE};\r\n      margin-right: ${LEGEND_LABEL_LEFT_MARGIN};\r\n      border-color: ${borderColor};`\r\n    );\r\n  }\r\n\r\n  public createHtmlLegendItemText(item: ChartItem): HTMLParagraphElement {\r\n    const textContainer = document.createElement(\"p\");\r\n    textContainer.style.color = item.fontColor;\r\n    textContainer.style.fontSize = `${LEGEND_FONT_SIZE}px`;\r\n    textContainer.style.margin = \"0\";\r\n    textContainer.style.padding = \"0\";\r\n\r\n    const text = document.createTextNode(item.text);\r\n    textContainer.appendChild(text);\r\n    return textContainer;\r\n  }\r\n\r\n  public createTooltipAndItsIcon(\r\n    doughnutData: any,\r\n    maxValueToDisplay: number\r\n  ): HTMLDivElement {\r\n    const iconTopWrapper = document.createElement(\"div\");\r\n    const iconWrapper = document.createElement(\"div\");\r\n    const icon = document.createElement(\"img\");\r\n    iconTopWrapper.style.position = \"absolute\";\r\n    iconTopWrapper.style.right = \"-32px\";\r\n    icon.src = \"src/assets/icons/Navigation_Notification_Question_24px.svg\";\r\n    icon.style.top = \"0\";\r\n    icon.style.width = \"1.5rem\";\r\n    icon.style.filter =\r\n      \"invert(38%) sepia(19%) saturate(18%) hue-rotate(337deg) brightness(97%) contrast(85%)\";\r\n    iconWrapper.style.position = \"relative\";\r\n    iconWrapper.style.display = \"flex\";\r\n    const tooltip = this.createLegendOthersTooltip(\r\n      doughnutData,\r\n      maxValueToDisplay\r\n    );\r\n    icon.onmouseover = () => {\r\n      (iconWrapper.firstElementChild as HTMLElement).style.visibility =\r\n        \"visible\";\r\n    };\r\n    icon.onmouseleave = () => {\r\n      (iconWrapper.firstElementChild as HTMLElement).style.visibility =\r\n        \"hidden\";\r\n    };\r\n    iconTopWrapper.appendChild(iconWrapper);\r\n    iconWrapper.appendChild(tooltip);\r\n    iconWrapper.appendChild(icon);\r\n    return iconTopWrapper;\r\n  }\r\n\r\n  private createLegendOthersTooltip(\r\n    doughnutData: any,\r\n    maxValueToDisplay: number\r\n  ): HTMLDivElement {\r\n    const tooltip = document.createElement(\"div\");\r\n    tooltip.style.visibility = \"hidden\";\r\n    tooltip.style.position = \"absolute\";\r\n    tooltip.style.zIndex = \"10\";\r\n    tooltip.style.width = \"350px\";\r\n    tooltip.style.bottom = \"100%\";\r\n    tooltip.style.left = \"50%\";\r\n    tooltip.style.marginLeft = \"-150px\";\r\n    tooltip.style.background = \"#FFFFFF\";\r\n    tooltip.style.boxShadow = \"0px 1px 5px rgba(0, 0, 0, 0.2)\";\r\n    tooltip.style.borderRadius = \"0.5rem\";\r\n    tooltip.style.fontSize = \"14px\";\r\n    tooltip.style.overflow = \"hidden\";\r\n    this.addOthersTooltipLines(doughnutData, maxValueToDisplay, tooltip);\r\n    return tooltip;\r\n  }\r\n\r\n  private addOthersTooltipLines(\r\n    doughnutData: any,\r\n    maxValueToDisplay: number,\r\n    tooltip: HTMLDivElement\r\n  ): void {\r\n    const startIndex = maxValueToDisplay - 1;\r\n    doughnutData.data\r\n      .slice(startIndex)\r\n      .forEach((_ignore: any, index: number) => {\r\n        const dataIndex = startIndex + index;\r\n        const textWrapper = document.createElement(\"div\");\r\n        textWrapper.style.display = \"flex\";\r\n        textWrapper.style.justifyContent = \"space-between\";\r\n        textWrapper.style.padding = \"0.5rem\";\r\n        textWrapper.style.border = \"1px solid #CCCCCC\";\r\n        const label = document.createElement(\"span\");\r\n        label.appendChild(\r\n          document.createTextNode(doughnutData.labels[dataIndex])\r\n        );\r\n        const value = document.createElement(\"span\");\r\n        value.appendChild(\r\n          document.createTextNode(\r\n            this.formatUtilitiesService.formatValueAndRate(\r\n              doughnutData,\r\n              dataIndex\r\n            )\r\n          )\r\n        );\r\n        textWrapper.appendChild(label);\r\n        textWrapper.appendChild(value);\r\n        tooltip.appendChild(textWrapper);\r\n      });\r\n  }\r\n\r\n  private getChartsData(chart: any): unknown[] {\r\n    let dataSets: unknown[] = chart.config.data.datasets;\r\n    if (this.isMonoDataSetChart(chart)) {\r\n      dataSets = chart.config.data.datasets[0].data;\r\n    }\r\n    return dataSets;\r\n  }\r\n\r\n  private isMonoDataSetChart(chart: Chart): boolean {\r\n    const { type } = chart.config;\r\n    return type === \"pie\" || type === \"doughnut\";\r\n  }\r\n\r\n  private allDataVisible(chart: Chart): boolean {\r\n    let allVisible = true;\r\n    const chartsData: unknown[] = this.getChartsData(chart);\r\n    chartsData.forEach((_data, dataIndex) => {\r\n      allVisible = allVisible && this.isChartDataVisible(chart, dataIndex);\r\n    });\r\n    return allVisible;\r\n  }\r\n\r\n  private isChartDataVisible(chart: Chart, dataIndex: number): boolean {\r\n    if (this.isMonoDataSetChart(chart)) {\r\n      return chart.getDataVisibility(dataIndex);\r\n    } else {\r\n      return chart.isDatasetVisible(dataIndex);\r\n    }\r\n  }\r\n\r\n  private isDefaultWhiteColor(color: string): boolean {\r\n    return color === \"#00000000\";\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions<radar> | ChartOptions<doughnut> | ChartOptions<bar> | ChartOptions<line>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "plugins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLLegendPlugin",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [
                {
                    "name": "getDataVisibility",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDatasetVisible",
                    "args": [
                        {
                            "name": "datasetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "datasetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDatasetVisibility",
                    "args": [
                        {
                            "name": "datasetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "visible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "datasetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "visible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDataVisibility",
                    "args": [
                        {
                            "name": "datasetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "datasetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": []
        },
        {
            "name": "ChartData",
            "id": "interface-ChartData-a4993dd246e5d5943e289b4e1f7cc0f2183aa74bedde3af6a66224727c57b9f2793d72e47d909306b8a1a94e18794806f7c32a507fe35a6993b6bf0168939772",
            "file": "src/types/chart.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Plugin } from \"chart.js\";\r\n\r\nexport interface ChartData {\r\n  data: any;\r\n  loading: boolean;\r\n  error: boolean;\r\n}\r\n\r\nexport type HTMLLegendPlugin = Plugin<\r\n  \"bar\" | \"doughnut\" | \"line\",\r\n  Record<string, any>\r\n>;\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ChartItem",
            "id": "interface-ChartItem-1d9025f8060d10868ac7dbe5110d9d2fd5fdf1f3ff4a29ac069f0b65902cfa93eb033062b8797bb3c0ec73916eacb3b17621cdb6b7d5e59391a9c9e463e37dd2",
            "file": "src/services/chart-legend.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HTMLLegendPlugin } from \"../types/chart\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { PatternService } from \"./pattern.service\";\r\nimport { FormatUtilitiesService } from \"./format-utilities.service\";\r\nimport { ChartOptions } from \"chart.js\";\r\n\r\nexport const LEGEND_FONT_SIZE = 14;\r\nexport const LEGEND_LABEL_LEFT_MARGIN = \"6px\";\r\nexport const LEGEND_BOX_SIZE = \"22px\";\r\nexport const LEGEND_BOX_POINT_SIZE = 6;\r\nexport const LEGEND_BOX_BORDER = \"2px\";\r\n\r\nexport interface Chart {\r\n  update(): void;\r\n  toggleDataVisibility(datasetIndex: number): void;\r\n  isDatasetVisible(datasetIndex: number): boolean;\r\n  getDataVisibility(index: number): boolean;\r\n  setDatasetVisibility(datasetIndex: number, visible: boolean): void;\r\n  plugins: HTMLLegendPlugin;\r\n  options:\r\n    | ChartOptions<\"radar\">\r\n    | ChartOptions<\"doughnut\">\r\n    | ChartOptions<\"bar\">\r\n    | ChartOptions<\"line\">;\r\n  config: {\r\n    type?: string;\r\n    data: { labels: string[]; datasets: unknown[]; data?: unknown[] };\r\n  };\r\n}\r\n\r\nexport interface ChartItem {\r\n  fontColor: string;\r\n  hidden: boolean;\r\n  text: string;\r\n  fillStyle: string;\r\n  strokeStyle: string;\r\n  lineWidth: number;\r\n  datasetIndex: number;\r\n  index: number;\r\n  lineCap?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ChartLegendService {\r\n  constructor(\r\n    private readonly patternService: PatternService,\r\n    private readonly formatUtilitiesService: FormatUtilitiesService\r\n  ) {}\r\n\r\n  public getHtmlLegendPlugin(\r\n    legendContainer: BehaviorSubject<HTMLElement | null>,\r\n    selectMode: BehaviorSubject<boolean>,\r\n    onHoverIndex: BehaviorSubject<any>,\r\n    disableAccessibility: boolean,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    enableHoverFeature: boolean,\r\n    maxValueToDisplay?: number,\r\n    chartData?: any\r\n  ): HTMLLegendPlugin {\r\n    const chartLegendService = this;\r\n    return {\r\n      id: \"htmlLegend\",\r\n      afterUpdate(chart: any) {\r\n        const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n        const flexDirection = isDoughnut ? \"column\" : \"row\";\r\n        const ul: HTMLUListElement = chartLegendService.getOrCreateLegendList(\r\n          legendContainer,\r\n          flexDirection\r\n        );\r\n        ul.style.margin = \"1.375rem 1.0625rem\";\r\n        while (ul.firstChild) {\r\n          ul.firstChild.remove();\r\n        }\r\n        const items: ChartItem[] =\r\n          chart.options.plugins.legend.labels.generateLabels(chart);\r\n        items.forEach((item: ChartItem): void => {\r\n          const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n          const index: number = isDoughnut ? item.index : item.datasetIndex;\r\n          const li: HTMLElement =\r\n            chartLegendService.createHtmlLegendListElement(\r\n              chart,\r\n              selectMode,\r\n              index\r\n            );\r\n          if (isDoughnut) {\r\n            const isOthersElement: boolean = index + 1 === maxValueToDisplay;\r\n            li.style.marginTop = \"12px\";\r\n            if (isOthersElement) {\r\n              li.style.position = \"relative\";\r\n            }\r\n          } else {\r\n            li.style.marginRight = \"10px\";\r\n          }\r\n          li.style.width = \"max-content\";\r\n          li.style.cursor = \"pointer\";\r\n          let liContent: HTMLElement;\r\n          if (!selectMode.value) {\r\n            liContent = chartLegendService.createLegendElementWithPatterns(\r\n              item,\r\n              chart,\r\n              onHoverIndex,\r\n              disableAccessibility,\r\n              patternsColors,\r\n              patternsList,\r\n              enableHoverFeature\r\n            );\r\n          } else {\r\n            liContent = chartLegendService.createLegendElementWithCheckbox(\r\n              chart,\r\n              item,\r\n              selectMode,\r\n              onHoverIndex,\r\n              patternsColors,\r\n              enableHoverFeature\r\n            );\r\n          }\r\n          liContent.style.boxSizing = \"border-box\";\r\n          li.appendChild(liContent);\r\n          li.appendChild(chartLegendService.createHtmlLegendItemText(item));\r\n          if (\r\n            isDoughnut &&\r\n            maxValueToDisplay &&\r\n            chartLegendService.hasOthersTooltipToDisplay(\r\n              chartData,\r\n              maxValueToDisplay,\r\n              index\r\n            )\r\n          ) {\r\n            li.appendChild(\r\n              chartLegendService.createTooltipAndItsIcon(\r\n                chartData,\r\n                maxValueToDisplay\r\n              )\r\n            );\r\n          }\r\n          ul.appendChild(li);\r\n        });\r\n      },\r\n    };\r\n  }\r\n\r\n  public hasOthersTooltipToDisplay(\r\n    doughnutData: any,\r\n    maxValueToDisplay: number,\r\n    index: number\r\n  ) {\r\n    return (\r\n      doughnutData.data.length > maxValueToDisplay &&\r\n      index === maxValueToDisplay - 1\r\n    );\r\n  }\r\n\r\n  public getOrCreateLegendList(\r\n    legendContainer: BehaviorSubject<HTMLElement | null>,\r\n    flexDirection: string\r\n  ): HTMLUListElement {\r\n    let listContainer = legendContainer?.value?.querySelector(\"ul\");\r\n    if (!listContainer) {\r\n      listContainer = document.createElement(\"ul\");\r\n      listContainer.style.display = \"flex\";\r\n      listContainer.style.flexDirection = flexDirection;\r\n      listContainer.style.margin = \"0\";\r\n      listContainer.style.padding = \"0\";\r\n      legendContainer.value?.appendChild(listContainer);\r\n    }\r\n    return listContainer;\r\n  }\r\n\r\n  public createHtmlLegendListElement(\r\n    chart: Chart,\r\n    selectMode: BehaviorSubject<boolean>,\r\n    elementIndex: number\r\n  ) {\r\n    const li: HTMLElement = document.createElement(\"li\");\r\n    li.style.alignItems = \"center\";\r\n    li.style.cursor = selectMode.value ? \"\" : \"pointer\";\r\n    li.style.display = \"flex\";\r\n    li.style.flexDirection = \"row\";\r\n    li.setAttribute(\"data-test-id\", `legend-item-${elementIndex}`);\r\n    li.onclick = () => {\r\n      if (!selectMode.value) {\r\n        this.hideAllButThis(chart, elementIndex, selectMode);\r\n        chart.update();\r\n      } else {\r\n        this.switchItemVisibility(chart, elementIndex, selectMode);\r\n      }\r\n    };\r\n    return li;\r\n  }\r\n\r\n  public hideAllButThis(\r\n    chart: Chart,\r\n    elementIndex: number,\r\n    selectMode: BehaviorSubject<boolean>\r\n  ) {\r\n    if (!selectMode.value) {\r\n      const dataSets: unknown[] = this.getChartsData(chart);\r\n      selectMode.next(true);\r\n      dataSets.forEach((_data, index) => {\r\n        if (index !== elementIndex) {\r\n          this.switchItemVisibility(chart, index);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public switchItemVisibility(\r\n    chart: Chart,\r\n    elementIndex: number,\r\n    selectMode?: BehaviorSubject<boolean>\r\n  ): void {\r\n    if (this.isMonoDataSetChart(chart)) {\r\n      chart.toggleDataVisibility(elementIndex);\r\n    } else {\r\n      chart.setDatasetVisibility(\r\n        elementIndex,\r\n        !chart.isDatasetVisible(elementIndex)\r\n      );\r\n    }\r\n\r\n    if (selectMode && this.allDataVisible(chart)) {\r\n      selectMode.next(false);\r\n    }\r\n    chart.update();\r\n  }\r\n\r\n  public createLegendElementWithPatterns(\r\n    item: ChartItem,\r\n    chart: Chart,\r\n    onHoverIndex: BehaviorSubject<any>,\r\n    disableAccessibility: boolean,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    enableHoverFeature: boolean\r\n  ): HTMLElement {\r\n    const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n    const index: number = isDoughnut ? item.index : item.datasetIndex;\r\n    const img: HTMLImageElement = new Image();\r\n    const boxSpan: HTMLElement = this.createHtmlLegendLine(\r\n      item,\r\n      chart.config.type\r\n    );\r\n    const pattern: CanvasPattern = patternsList[index](\r\n      false,\r\n      patternsColors[index],\r\n      disableAccessibility\r\n    );\r\n    const patternCanvas: HTMLCanvasElement =\r\n      this.patternService.getPatternCanvas(pattern);\r\n    img.src = patternCanvas.toDataURL();\r\n    boxSpan.style.background = `url(${img.src})`;\r\n    boxSpan.style.backgroundSize = \"cover\";\r\n    boxSpan.style.borderColor = patternsColors[index];\r\n    boxSpan.style.borderWidth = LEGEND_BOX_BORDER;\r\n\r\n    if (enableHoverFeature) {\r\n      boxSpan.onmouseover = (): void => {\r\n        isDoughnut\r\n          ? onHoverIndex.next(index)\r\n          : onHoverIndex.next({\r\n              ...onHoverIndex.value,\r\n              dataSetIndex: index,\r\n            });\r\n      };\r\n      boxSpan.onmouseleave = (): void => {\r\n        onHoverIndex.next(null);\r\n      };\r\n    }\r\n    return boxSpan;\r\n  }\r\n\r\n  public createHtmlLegendLine(\r\n    item: ChartItem,\r\n    type: string | undefined\r\n  ): HTMLDivElement {\r\n    const boxSpan = document.createElement(\"div\");\r\n    if (type !== \"doughnut\") {\r\n      boxSpan.style.background = \"rgba(0, 0, 0, 0.1)\";\r\n      boxSpan.style.borderColor = item.strokeStyle;\r\n      boxSpan.style.borderWidth = LEGEND_BOX_BORDER;\r\n    }\r\n    boxSpan.style.borderRadius = \"5px\";\r\n    boxSpan.style.borderStyle = \"solid\";\r\n    boxSpan.style.display = \"flex\";\r\n    boxSpan.style.justifyContent = \"center\";\r\n    boxSpan.style.alignItems = \"center\";\r\n    boxSpan.style.minWidth = LEGEND_BOX_SIZE;\r\n    boxSpan.style.marginRight = LEGEND_LABEL_LEFT_MARGIN;\r\n    boxSpan.style.minHeight = LEGEND_BOX_SIZE;\r\n    return boxSpan;\r\n  }\r\n\r\n  public createLegendElementWithCheckbox(\r\n    chart: Chart,\r\n    item: ChartItem,\r\n    selectMode: BehaviorSubject<boolean>,\r\n    onHoverIndex: BehaviorSubject<any>,\r\n    patternsColors: string[],\r\n    enableHoverFeature: boolean\r\n  ): HTMLElement {\r\n    const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n    const index: number = isDoughnut ? item.index : item.datasetIndex;\r\n    const checkbox: HTMLElement = this.createLegendCheckbox(\r\n      chart,\r\n      item,\r\n      patternsColors\r\n    );\r\n    const labels = chart.config.data.labels;\r\n    const allCheckBoxesVisible: boolean = labels.every((_, index: number) =>\r\n      chart.getDataVisibility(index)\r\n    );\r\n    if (allCheckBoxesVisible) {\r\n      if (isDoughnut) {\r\n        selectMode.next(false);\r\n        onHoverIndex.next(-1);\r\n      }\r\n      return checkbox;\r\n    }\r\n    if (enableHoverFeature) {\r\n      checkbox.onmouseover = (): void => {\r\n        isDoughnut\r\n          ? onHoverIndex.next(index)\r\n          : onHoverIndex.next({\r\n              ...onHoverIndex.value,\r\n              dataSetIndex: index,\r\n            });\r\n        chart.update();\r\n      };\r\n      checkbox.onmouseleave = (): void => {\r\n        isDoughnut\r\n          ? onHoverIndex.next(null)\r\n          : onHoverIndex.next({\r\n              ...onHoverIndex.value,\r\n              dataSetIndex: -1,\r\n            });\r\n        chart.update();\r\n      };\r\n    }\r\n    return checkbox;\r\n  }\r\n\r\n  public createLegendCheckbox(\r\n    chart: Chart,\r\n    item: ChartItem,\r\n    patternsColors: string[]\r\n  ): any {\r\n    const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n    const index: number = isDoughnut ? item.index : item.datasetIndex;\r\n    const checkbox = document.createElement(\"input\");\r\n    checkbox.setAttribute(\"type\", \"checkbox\");\r\n    checkbox.setAttribute(\"data-test-id\", `legend-checkbox-${index}`);\r\n    const isDataSetVisible = this.isChartDataVisible(chart, index);\r\n    const patternColor = patternsColors ? patternsColors[index] : undefined;\r\n    this.addCheckboxStyle(\r\n      isDataSetVisible,\r\n      item,\r\n      checkbox,\r\n      patternColor as string\r\n    );\r\n    return checkbox;\r\n  }\r\n\r\n  public addCheckboxStyle(\r\n    isDataSetVisible: boolean,\r\n    item: ChartItem,\r\n    checkbox: Element,\r\n    patternColor: string\r\n  ): void {\r\n    let backgroundColor = \"#fff\";\r\n    let borderColor = \"#666\";\r\n    if (isDataSetVisible) {\r\n      //Default white for patterns chart\r\n      backgroundColor = this.isDefaultWhiteColor(item.strokeStyle)\r\n        ? patternColor\r\n        : item.strokeStyle;\r\n      borderColor = this.isDefaultWhiteColor(item.strokeStyle)\r\n        ? patternColor\r\n        : item.strokeStyle;\r\n      checkbox.setAttribute(\"checked\", \"\" + isDataSetVisible);\r\n    }\r\n    checkbox.setAttribute(\"class\", \"mc-checkbox__input\");\r\n    checkbox.setAttribute(\r\n      \"style\",\r\n      `background-color: ${backgroundColor};\r\n      min-width: ${LEGEND_BOX_SIZE};\r\n      min-height: ${LEGEND_BOX_SIZE};\r\n      margin-right: ${LEGEND_LABEL_LEFT_MARGIN};\r\n      border-color: ${borderColor};`\r\n    );\r\n  }\r\n\r\n  public createHtmlLegendItemText(item: ChartItem): HTMLParagraphElement {\r\n    const textContainer = document.createElement(\"p\");\r\n    textContainer.style.color = item.fontColor;\r\n    textContainer.style.fontSize = `${LEGEND_FONT_SIZE}px`;\r\n    textContainer.style.margin = \"0\";\r\n    textContainer.style.padding = \"0\";\r\n\r\n    const text = document.createTextNode(item.text);\r\n    textContainer.appendChild(text);\r\n    return textContainer;\r\n  }\r\n\r\n  public createTooltipAndItsIcon(\r\n    doughnutData: any,\r\n    maxValueToDisplay: number\r\n  ): HTMLDivElement {\r\n    const iconTopWrapper = document.createElement(\"div\");\r\n    const iconWrapper = document.createElement(\"div\");\r\n    const icon = document.createElement(\"img\");\r\n    iconTopWrapper.style.position = \"absolute\";\r\n    iconTopWrapper.style.right = \"-32px\";\r\n    icon.src = \"src/assets/icons/Navigation_Notification_Question_24px.svg\";\r\n    icon.style.top = \"0\";\r\n    icon.style.width = \"1.5rem\";\r\n    icon.style.filter =\r\n      \"invert(38%) sepia(19%) saturate(18%) hue-rotate(337deg) brightness(97%) contrast(85%)\";\r\n    iconWrapper.style.position = \"relative\";\r\n    iconWrapper.style.display = \"flex\";\r\n    const tooltip = this.createLegendOthersTooltip(\r\n      doughnutData,\r\n      maxValueToDisplay\r\n    );\r\n    icon.onmouseover = () => {\r\n      (iconWrapper.firstElementChild as HTMLElement).style.visibility =\r\n        \"visible\";\r\n    };\r\n    icon.onmouseleave = () => {\r\n      (iconWrapper.firstElementChild as HTMLElement).style.visibility =\r\n        \"hidden\";\r\n    };\r\n    iconTopWrapper.appendChild(iconWrapper);\r\n    iconWrapper.appendChild(tooltip);\r\n    iconWrapper.appendChild(icon);\r\n    return iconTopWrapper;\r\n  }\r\n\r\n  private createLegendOthersTooltip(\r\n    doughnutData: any,\r\n    maxValueToDisplay: number\r\n  ): HTMLDivElement {\r\n    const tooltip = document.createElement(\"div\");\r\n    tooltip.style.visibility = \"hidden\";\r\n    tooltip.style.position = \"absolute\";\r\n    tooltip.style.zIndex = \"10\";\r\n    tooltip.style.width = \"350px\";\r\n    tooltip.style.bottom = \"100%\";\r\n    tooltip.style.left = \"50%\";\r\n    tooltip.style.marginLeft = \"-150px\";\r\n    tooltip.style.background = \"#FFFFFF\";\r\n    tooltip.style.boxShadow = \"0px 1px 5px rgba(0, 0, 0, 0.2)\";\r\n    tooltip.style.borderRadius = \"0.5rem\";\r\n    tooltip.style.fontSize = \"14px\";\r\n    tooltip.style.overflow = \"hidden\";\r\n    this.addOthersTooltipLines(doughnutData, maxValueToDisplay, tooltip);\r\n    return tooltip;\r\n  }\r\n\r\n  private addOthersTooltipLines(\r\n    doughnutData: any,\r\n    maxValueToDisplay: number,\r\n    tooltip: HTMLDivElement\r\n  ): void {\r\n    const startIndex = maxValueToDisplay - 1;\r\n    doughnutData.data\r\n      .slice(startIndex)\r\n      .forEach((_ignore: any, index: number) => {\r\n        const dataIndex = startIndex + index;\r\n        const textWrapper = document.createElement(\"div\");\r\n        textWrapper.style.display = \"flex\";\r\n        textWrapper.style.justifyContent = \"space-between\";\r\n        textWrapper.style.padding = \"0.5rem\";\r\n        textWrapper.style.border = \"1px solid #CCCCCC\";\r\n        const label = document.createElement(\"span\");\r\n        label.appendChild(\r\n          document.createTextNode(doughnutData.labels[dataIndex])\r\n        );\r\n        const value = document.createElement(\"span\");\r\n        value.appendChild(\r\n          document.createTextNode(\r\n            this.formatUtilitiesService.formatValueAndRate(\r\n              doughnutData,\r\n              dataIndex\r\n            )\r\n          )\r\n        );\r\n        textWrapper.appendChild(label);\r\n        textWrapper.appendChild(value);\r\n        tooltip.appendChild(textWrapper);\r\n      });\r\n  }\r\n\r\n  private getChartsData(chart: any): unknown[] {\r\n    let dataSets: unknown[] = chart.config.data.datasets;\r\n    if (this.isMonoDataSetChart(chart)) {\r\n      dataSets = chart.config.data.datasets[0].data;\r\n    }\r\n    return dataSets;\r\n  }\r\n\r\n  private isMonoDataSetChart(chart: Chart): boolean {\r\n    const { type } = chart.config;\r\n    return type === \"pie\" || type === \"doughnut\";\r\n  }\r\n\r\n  private allDataVisible(chart: Chart): boolean {\r\n    let allVisible = true;\r\n    const chartsData: unknown[] = this.getChartsData(chart);\r\n    chartsData.forEach((_data, dataIndex) => {\r\n      allVisible = allVisible && this.isChartDataVisible(chart, dataIndex);\r\n    });\r\n    return allVisible;\r\n  }\r\n\r\n  private isChartDataVisible(chart: Chart, dataIndex: number): boolean {\r\n    if (this.isMonoDataSetChart(chart)) {\r\n      return chart.getDataVisibility(dataIndex);\r\n    } else {\r\n      return chart.isDatasetVisible(dataIndex);\r\n    }\r\n  }\r\n\r\n  private isDefaultWhiteColor(color: string): boolean {\r\n    return color === \"#00000000\";\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "datasetIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "fillStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "fontColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "lineCap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "lineWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "strokeStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DataBarData",
            "id": "interface-DataBarData-274017ca3307800b00c0e193c60ff1fe16f8a043cb27a1dfae2f171a4767b4247a71b77b94449577f9f0350a0cf9d92b6b3eab6a69ef8741c6bb1e58a8573fa0",
            "file": "src/types/bar-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChartData, Plugin } from \"chart.js\";\r\ntype AnyObject = Record<string, any>;\r\n\r\nexport interface DataBarData {\r\n  amount: number;\r\n  amountUnit: string;\r\n  rate: number;\r\n}\r\n\r\nexport interface BarData {\r\n  label: string;\r\n  backgroundColor?: string;\r\n  data: DataBarData[];\r\n  stack?: number;\r\n}\r\nexport type BarPlugin = Plugin<\"bar\", AnyObject>;\r\nexport type BarChartData = ChartData<\"bar\", number[]>;\r\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "amountUnit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "rate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Dataset",
            "id": "interface-Dataset-53e508783cc9e9d66b130a9117f9c5db969ba4401d9899c4cfedb4f0ab434e2072a01f62db6d629afafb5072e2f5909409d7efe0a3276aa46c5f3880b86d4474",
            "file": "src/services/bar-chart-functions.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { PatternService } from \"./pattern.service\";\r\nimport { ColorFunctionsService } from \"./color-function.service\";\r\nimport { ChartLegendService } from \"./chart-legend.service\";\r\n\r\ninterface Dataset {\r\n  data: number[];\r\n  label: any;\r\n  stack?: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class BarChartFunctionsService {\r\n  barChartRef = new BehaviorSubject<any>(null);\r\n  onHoverIndex = new BehaviorSubject<any>({\r\n    dataSetIndex: -1,\r\n    columnIndex: -1,\r\n  });\r\n  borderWidth = new BehaviorSubject<number>(3);\r\n\r\n  constructor(\r\n    private readonly patternService: PatternService,\r\n    private readonly colorFunctionService: ColorFunctionsService,\r\n    private readonly chartLegendService: ChartLegendService\r\n  ) {}\r\n\r\n  privateGetHtmlLegendPlugin(\r\n    legendContainer: BehaviorSubject<HTMLElement | null>,\r\n    selectMode: BehaviorSubject<boolean>,\r\n    disableAccessibility: boolean,\r\n    patternsColors: string[],\r\n    patternsList: Array<\r\n      (\r\n        hover: boolean,\r\n        color: string,\r\n        disableAccessibility: boolean\r\n      ) => CanvasPattern\r\n    >,\r\n    enableHoverFeature: boolean\r\n  ) {\r\n    return this.chartLegendService.getHtmlLegendPlugin(\r\n      legendContainer,\r\n      selectMode,\r\n      this.onHoverIndex,\r\n      disableAccessibility,\r\n      patternsColors,\r\n      patternsList,\r\n      enableHoverFeature\r\n    );\r\n  }\r\n\r\n  public getStackedDatasets(\r\n    datasets: Dataset[],\r\n    stackDatasets: boolean,\r\n    disableAccessibility: boolean,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    patternShifting?: number\r\n  ) {\r\n    // Hack to force refresh\r\n    const barChartFunctionService = this;\r\n    const borderWithValue = this.borderWidth.value;\r\n    return datasets.map((dataset, datasetIndex) => {\r\n      return {\r\n        borderColor: function (context: any) {\r\n          return disableAccessibility\r\n            ? \"#00000000\"\r\n            : barChartFunctionService.getBorderColor(\r\n                datasetIndex,\r\n                context.index,\r\n                patternsColors,\r\n                patternShifting\r\n              );\r\n        },\r\n        backgroundColor: function (context: any) {\r\n          return barChartFunctionService.getPattern(\r\n            datasetIndex,\r\n            context.index,\r\n            disableAccessibility,\r\n            patternsColors,\r\n            patternsList,\r\n            patternShifting\r\n          );\r\n        },\r\n        borderWidth: function () {\r\n          return disableAccessibility ? 1 : borderWithValue;\r\n        },\r\n        categoryPercentage: 0.8,\r\n        barPercentage: 0.64,\r\n        data: dataset.data,\r\n        label: dataset.label,\r\n        stack: `Stack ${stackDatasets ? dataset.stack : datasetIndex}`,\r\n      };\r\n    });\r\n  }\r\n\r\n  // Hack to force the chart to reload on Hover\r\n  private reloadChart() {\r\n    this.borderWidth.next(4);\r\n    this.borderWidth.next(3);\r\n  }\r\n\r\n  private getDatasets(\r\n    firstDataSet: Dataset,\r\n    secondDataSet: Dataset,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    disableAccessibility: boolean\r\n  ) {\r\n    return this.getStackedDatasets(\r\n      [firstDataSet, secondDataSet],\r\n      false,\r\n      disableAccessibility,\r\n      patternsColors,\r\n      patternsList\r\n    );\r\n  }\r\n\r\n  private getBorderColor(\r\n    dataSetIndex: number,\r\n    contextIndex: number,\r\n    patternsColors: string[],\r\n    patternShifting?: number\r\n  ) {\r\n    const index = this.patternService.getPatternIndexWithShift(\r\n      dataSetIndex,\r\n      patternShifting\r\n    );\r\n    if (this.displayFullOpacity(dataSetIndex, contextIndex)) {\r\n      return patternsColors[index];\r\n    } else {\r\n      return this.colorFunctionService.addAlpha(patternsColors[index], 0.2);\r\n    }\r\n  }\r\n\r\n  private getPattern(\r\n    dataSetIndex: number,\r\n    contextIndex: number,\r\n    disableAccessibility: boolean,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    patternShifting?: number\r\n  ) {\r\n    const index = this.patternService.getPatternIndexWithShift(\r\n      dataSetIndex,\r\n      patternShifting\r\n    );\r\n    if (this.displayFullOpacity(dataSetIndex, contextIndex)) {\r\n      return patternsList[index](\r\n        false,\r\n        patternsColors[index],\r\n        disableAccessibility\r\n      );\r\n    } else {\r\n      return patternsList[index](\r\n        true,\r\n        patternsColors[index],\r\n        disableAccessibility\r\n      );\r\n    }\r\n  }\r\n\r\n  private nothingHovered(): boolean {\r\n    return this.onHoverIndex.value.dataSetIndex < 0;\r\n  }\r\n\r\n  private columnHovered(dataSetIndex: number, contextIndex: number): boolean {\r\n    return (\r\n      this.onHoverIndex.value.dataSetIndex === dataSetIndex &&\r\n      this.onHoverIndex.value.columnIndex === contextIndex\r\n    );\r\n  }\r\n\r\n  private legendHovered(dataSetIndex: number): boolean {\r\n    return (\r\n      this.onHoverIndex.value.dataSetIndex === dataSetIndex &&\r\n      this.onHoverIndex.value.columnIndex < 0\r\n    );\r\n  }\r\n\r\n  private displayFullOpacity(\r\n    dataSetIndex: number,\r\n    contextIndex: number\r\n  ): boolean {\r\n    return (\r\n      this.nothingHovered() ||\r\n      this.columnHovered(dataSetIndex, contextIndex) ||\r\n      this.legendHovered(dataSetIndex)\r\n    );\r\n  }\r\n\r\n  private resetOnHoverIndex() {\r\n    this.onHoverIndex.next({\r\n      dataSetIndex: -1,\r\n      columnIndex: -1,\r\n    });\r\n  }\r\n\r\n  private getOnHoverOptions() {\r\n    return (\r\n      _ignore: unknown,\r\n      activeElements: Array<{ index: number; datasetIndex: number }>\r\n    ) => {\r\n      if (activeElements[0] !== undefined) {\r\n        this.onHoverIndex.value.dataSetIndex = activeElements[0].datasetIndex;\r\n        this.onHoverIndex.value.columnIndex = activeElements[0].index;\r\n      } else {\r\n        this.resetOnHoverIndex();\r\n      }\r\n    };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "stack",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DoughnutData",
            "id": "interface-DoughnutData-c3b4718867fd4d5072c90dfa0ed21edb55d90b135de591efa9d81159950e9dfa608bb9a37874ea1ac1e5817f14545ffa6ba81cd9731bcd006d35a9ce922a1db8",
            "file": "src/types/doughnut-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChartData, Plugin } from \"chart.js\";\r\n\r\ntype AnyObject = Record<string, any>;\r\n\r\nexport interface DoughnutData {\r\n  tooltipLabel?: number;\r\n  value: number;\r\n  unit: string;\r\n  rate?: number;\r\n}\r\n\r\nexport type DoughnutPlugin = Plugin<\"doughnut\", AnyObject>;\r\n\r\nexport type DoughnutChartData = ChartData<\"doughnut\", number[]>;\r\n",
            "properties": [
                {
                    "name": "rate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tooltipLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "unit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "BarChartFunctionsService",
            "id": "injectable-BarChartFunctionsService-53e508783cc9e9d66b130a9117f9c5db969ba4401d9899c4cfedb4f0ab434e2072a01f62db6d629afafb5072e2f5909409d7efe0a3276aa46c5f3880b86d4474",
            "file": "src/services/bar-chart-functions.service.ts",
            "properties": [
                {
                    "name": "barChartRef",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "borderWidth",
                    "defaultValue": "new BehaviorSubject<number>(3)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "onHoverIndex",
                    "defaultValue": "new BehaviorSubject<any>({\r\n    dataSetIndex: -1,\r\n    columnIndex: -1,\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [
                {
                    "name": "columnHovered",
                    "args": [
                        {
                            "name": "dataSetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contextIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataSetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contextIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayFullOpacity",
                    "args": [
                        {
                            "name": "dataSetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contextIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataSetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contextIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBorderColor",
                    "args": [
                        {
                            "name": "dataSetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contextIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternShifting",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataSetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contextIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternShifting",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDatasets",
                    "args": [
                        {
                            "name": "firstDataSet",
                            "type": "Dataset",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "secondDataSet",
                            "type": "Dataset",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "firstDataSet",
                            "type": "Dataset",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "secondDataSet",
                            "type": "Dataset",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOnHoverOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "(_ignore: unknown, activeElements: Array<{ index: number; datasetIndex: number; }>) => void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPattern",
                    "args": [
                        {
                            "name": "dataSetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contextIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternShifting",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataSetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contextIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternShifting",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStackedDatasets",
                    "args": [
                        {
                            "name": "datasets",
                            "type": "Dataset[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stackDatasets",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternShifting",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "datasets",
                            "type": "Dataset[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stackDatasets",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternShifting",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "legendHovered",
                    "args": [
                        {
                            "name": "dataSetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataSetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nothingHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "privateGetHtmlLegendPlugin",
                    "args": [
                        {
                            "name": "legendContainer",
                            "type": "BehaviorSubject<HTMLElement | null>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectMode",
                            "type": "BehaviorSubject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsList",
                            "type": "Array<CanvasPattern>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "enableHoverFeature",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "legendContainer",
                            "type": "BehaviorSubject<HTMLElement | null>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectMode",
                            "type": "BehaviorSubject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsList",
                            "type": "Array<CanvasPattern>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enableHoverFeature",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reloadChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resetOnHoverIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { PatternService } from \"./pattern.service\";\r\nimport { ColorFunctionsService } from \"./color-function.service\";\r\nimport { ChartLegendService } from \"./chart-legend.service\";\r\n\r\ninterface Dataset {\r\n  data: number[];\r\n  label: any;\r\n  stack?: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class BarChartFunctionsService {\r\n  barChartRef = new BehaviorSubject<any>(null);\r\n  onHoverIndex = new BehaviorSubject<any>({\r\n    dataSetIndex: -1,\r\n    columnIndex: -1,\r\n  });\r\n  borderWidth = new BehaviorSubject<number>(3);\r\n\r\n  constructor(\r\n    private readonly patternService: PatternService,\r\n    private readonly colorFunctionService: ColorFunctionsService,\r\n    private readonly chartLegendService: ChartLegendService\r\n  ) {}\r\n\r\n  privateGetHtmlLegendPlugin(\r\n    legendContainer: BehaviorSubject<HTMLElement | null>,\r\n    selectMode: BehaviorSubject<boolean>,\r\n    disableAccessibility: boolean,\r\n    patternsColors: string[],\r\n    patternsList: Array<\r\n      (\r\n        hover: boolean,\r\n        color: string,\r\n        disableAccessibility: boolean\r\n      ) => CanvasPattern\r\n    >,\r\n    enableHoverFeature: boolean\r\n  ) {\r\n    return this.chartLegendService.getHtmlLegendPlugin(\r\n      legendContainer,\r\n      selectMode,\r\n      this.onHoverIndex,\r\n      disableAccessibility,\r\n      patternsColors,\r\n      patternsList,\r\n      enableHoverFeature\r\n    );\r\n  }\r\n\r\n  public getStackedDatasets(\r\n    datasets: Dataset[],\r\n    stackDatasets: boolean,\r\n    disableAccessibility: boolean,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    patternShifting?: number\r\n  ) {\r\n    // Hack to force refresh\r\n    const barChartFunctionService = this;\r\n    const borderWithValue = this.borderWidth.value;\r\n    return datasets.map((dataset, datasetIndex) => {\r\n      return {\r\n        borderColor: function (context: any) {\r\n          return disableAccessibility\r\n            ? \"#00000000\"\r\n            : barChartFunctionService.getBorderColor(\r\n                datasetIndex,\r\n                context.index,\r\n                patternsColors,\r\n                patternShifting\r\n              );\r\n        },\r\n        backgroundColor: function (context: any) {\r\n          return barChartFunctionService.getPattern(\r\n            datasetIndex,\r\n            context.index,\r\n            disableAccessibility,\r\n            patternsColors,\r\n            patternsList,\r\n            patternShifting\r\n          );\r\n        },\r\n        borderWidth: function () {\r\n          return disableAccessibility ? 1 : borderWithValue;\r\n        },\r\n        categoryPercentage: 0.8,\r\n        barPercentage: 0.64,\r\n        data: dataset.data,\r\n        label: dataset.label,\r\n        stack: `Stack ${stackDatasets ? dataset.stack : datasetIndex}`,\r\n      };\r\n    });\r\n  }\r\n\r\n  // Hack to force the chart to reload on Hover\r\n  private reloadChart() {\r\n    this.borderWidth.next(4);\r\n    this.borderWidth.next(3);\r\n  }\r\n\r\n  private getDatasets(\r\n    firstDataSet: Dataset,\r\n    secondDataSet: Dataset,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    disableAccessibility: boolean\r\n  ) {\r\n    return this.getStackedDatasets(\r\n      [firstDataSet, secondDataSet],\r\n      false,\r\n      disableAccessibility,\r\n      patternsColors,\r\n      patternsList\r\n    );\r\n  }\r\n\r\n  private getBorderColor(\r\n    dataSetIndex: number,\r\n    contextIndex: number,\r\n    patternsColors: string[],\r\n    patternShifting?: number\r\n  ) {\r\n    const index = this.patternService.getPatternIndexWithShift(\r\n      dataSetIndex,\r\n      patternShifting\r\n    );\r\n    if (this.displayFullOpacity(dataSetIndex, contextIndex)) {\r\n      return patternsColors[index];\r\n    } else {\r\n      return this.colorFunctionService.addAlpha(patternsColors[index], 0.2);\r\n    }\r\n  }\r\n\r\n  private getPattern(\r\n    dataSetIndex: number,\r\n    contextIndex: number,\r\n    disableAccessibility: boolean,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    patternShifting?: number\r\n  ) {\r\n    const index = this.patternService.getPatternIndexWithShift(\r\n      dataSetIndex,\r\n      patternShifting\r\n    );\r\n    if (this.displayFullOpacity(dataSetIndex, contextIndex)) {\r\n      return patternsList[index](\r\n        false,\r\n        patternsColors[index],\r\n        disableAccessibility\r\n      );\r\n    } else {\r\n      return patternsList[index](\r\n        true,\r\n        patternsColors[index],\r\n        disableAccessibility\r\n      );\r\n    }\r\n  }\r\n\r\n  private nothingHovered(): boolean {\r\n    return this.onHoverIndex.value.dataSetIndex < 0;\r\n  }\r\n\r\n  private columnHovered(dataSetIndex: number, contextIndex: number): boolean {\r\n    return (\r\n      this.onHoverIndex.value.dataSetIndex === dataSetIndex &&\r\n      this.onHoverIndex.value.columnIndex === contextIndex\r\n    );\r\n  }\r\n\r\n  private legendHovered(dataSetIndex: number): boolean {\r\n    return (\r\n      this.onHoverIndex.value.dataSetIndex === dataSetIndex &&\r\n      this.onHoverIndex.value.columnIndex < 0\r\n    );\r\n  }\r\n\r\n  private displayFullOpacity(\r\n    dataSetIndex: number,\r\n    contextIndex: number\r\n  ): boolean {\r\n    return (\r\n      this.nothingHovered() ||\r\n      this.columnHovered(dataSetIndex, contextIndex) ||\r\n      this.legendHovered(dataSetIndex)\r\n    );\r\n  }\r\n\r\n  private resetOnHoverIndex() {\r\n    this.onHoverIndex.next({\r\n      dataSetIndex: -1,\r\n      columnIndex: -1,\r\n    });\r\n  }\r\n\r\n  private getOnHoverOptions() {\r\n    return (\r\n      _ignore: unknown,\r\n      activeElements: Array<{ index: number; datasetIndex: number }>\r\n    ) => {\r\n      if (activeElements[0] !== undefined) {\r\n        this.onHoverIndex.value.dataSetIndex = activeElements[0].datasetIndex;\r\n        this.onHoverIndex.value.columnIndex = activeElements[0].index;\r\n      } else {\r\n        this.resetOnHoverIndex();\r\n      }\r\n    };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "patternService",
                        "type": "PatternService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colorFunctionService",
                        "type": "ColorFunctionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chartLegendService",
                        "type": "ChartLegendService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "patternService",
                        "type": "PatternService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colorFunctionService",
                        "type": "ColorFunctionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartLegendService",
                        "type": "ChartLegendService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ChartLegendService",
            "id": "injectable-ChartLegendService-1d9025f8060d10868ac7dbe5110d9d2fd5fdf1f3ff4a29ac069f0b65902cfa93eb033062b8797bb3c0ec73916eacb3b17621cdb6b7d5e59391a9c9e463e37dd2",
            "file": "src/services/chart-legend.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addCheckboxStyle",
                    "args": [
                        {
                            "name": "isDataSetVisible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "ChartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "checkbox",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 375,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "isDataSetVisible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "ChartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "checkbox",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addOthersTooltipLines",
                    "args": [
                        {
                            "name": "doughnutData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxValueToDisplay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tooltip",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 471,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "doughnutData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxValueToDisplay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tooltip",
                            "type": "HTMLDivElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "allDataVisible",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 518,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createHtmlLegendItemText",
                    "args": [
                        {
                            "name": "item",
                            "type": "ChartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLParagraphElement",
                    "typeParameters": [],
                    "line": 404,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ChartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createHtmlLegendLine",
                    "args": [
                        {
                            "name": "item",
                            "type": "ChartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLDivElement",
                    "typeParameters": [],
                    "line": 284,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ChartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createHtmlLegendListElement",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectMode",
                            "type": "BehaviorSubject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "elementIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectMode",
                            "type": "BehaviorSubject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "elementIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLegendCheckbox",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "ChartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 354,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "ChartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLegendElementWithCheckbox",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "ChartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectMode",
                            "type": "BehaviorSubject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "onHoverIndex",
                            "type": "BehaviorSubject<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "enableHoverFeature",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 305,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "ChartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectMode",
                            "type": "BehaviorSubject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onHoverIndex",
                            "type": "BehaviorSubject<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enableHoverFeature",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLegendElementWithPatterns",
                    "args": [
                        {
                            "name": "item",
                            "type": "ChartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "onHoverIndex",
                            "type": "BehaviorSubject<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "enableHoverFeature",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ChartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onHoverIndex",
                            "type": "BehaviorSubject<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enableHoverFeature",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLegendOthersTooltip",
                    "args": [
                        {
                            "name": "doughnutData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxValueToDisplay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLDivElement",
                    "typeParameters": [],
                    "line": 450,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "doughnutData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxValueToDisplay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTooltipAndItsIcon",
                    "args": [
                        {
                            "name": "doughnutData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxValueToDisplay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLDivElement",
                    "typeParameters": [],
                    "line": 416,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "doughnutData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxValueToDisplay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChartsData",
                    "args": [
                        {
                            "name": "chart",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[]",
                    "typeParameters": [],
                    "line": 505,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHtmlLegendPlugin",
                    "args": [
                        {
                            "name": "legendContainer",
                            "type": "BehaviorSubject<HTMLElement | null>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectMode",
                            "type": "BehaviorSubject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "onHoverIndex",
                            "type": "BehaviorSubject<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "enableHoverFeature",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxValueToDisplay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "chartData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLLegendPlugin",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "legendContainer",
                            "type": "BehaviorSubject<HTMLElement | null>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectMode",
                            "type": "BehaviorSubject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onHoverIndex",
                            "type": "BehaviorSubject<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enableHoverFeature",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxValueToDisplay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOrCreateLegendList",
                    "args": [
                        {
                            "name": "legendContainer",
                            "type": "BehaviorSubject<HTMLElement | null>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "flexDirection",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLUListElement",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "legendContainer",
                            "type": "BehaviorSubject<HTMLElement | null>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flexDirection",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasOthersTooltipToDisplay",
                    "args": [
                        {
                            "name": "doughnutData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxValueToDisplay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "doughnutData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxValueToDisplay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideAllButThis",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "elementIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectMode",
                            "type": "BehaviorSubject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "elementIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectMode",
                            "type": "BehaviorSubject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isChartDataVisible",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 527,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDefaultWhiteColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 535,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMonoDataSetChart",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 513,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchItemVisibility",
                    "args": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "elementIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectMode",
                            "type": "BehaviorSubject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "Chart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "elementIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectMode",
                            "type": "BehaviorSubject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HTMLLegendPlugin } from \"../types/chart\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { PatternService } from \"./pattern.service\";\r\nimport { FormatUtilitiesService } from \"./format-utilities.service\";\r\nimport { ChartOptions } from \"chart.js\";\r\n\r\nexport const LEGEND_FONT_SIZE = 14;\r\nexport const LEGEND_LABEL_LEFT_MARGIN = \"6px\";\r\nexport const LEGEND_BOX_SIZE = \"22px\";\r\nexport const LEGEND_BOX_POINT_SIZE = 6;\r\nexport const LEGEND_BOX_BORDER = \"2px\";\r\n\r\nexport interface Chart {\r\n  update(): void;\r\n  toggleDataVisibility(datasetIndex: number): void;\r\n  isDatasetVisible(datasetIndex: number): boolean;\r\n  getDataVisibility(index: number): boolean;\r\n  setDatasetVisibility(datasetIndex: number, visible: boolean): void;\r\n  plugins: HTMLLegendPlugin;\r\n  options:\r\n    | ChartOptions<\"radar\">\r\n    | ChartOptions<\"doughnut\">\r\n    | ChartOptions<\"bar\">\r\n    | ChartOptions<\"line\">;\r\n  config: {\r\n    type?: string;\r\n    data: { labels: string[]; datasets: unknown[]; data?: unknown[] };\r\n  };\r\n}\r\n\r\nexport interface ChartItem {\r\n  fontColor: string;\r\n  hidden: boolean;\r\n  text: string;\r\n  fillStyle: string;\r\n  strokeStyle: string;\r\n  lineWidth: number;\r\n  datasetIndex: number;\r\n  index: number;\r\n  lineCap?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ChartLegendService {\r\n  constructor(\r\n    private readonly patternService: PatternService,\r\n    private readonly formatUtilitiesService: FormatUtilitiesService\r\n  ) {}\r\n\r\n  public getHtmlLegendPlugin(\r\n    legendContainer: BehaviorSubject<HTMLElement | null>,\r\n    selectMode: BehaviorSubject<boolean>,\r\n    onHoverIndex: BehaviorSubject<any>,\r\n    disableAccessibility: boolean,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    enableHoverFeature: boolean,\r\n    maxValueToDisplay?: number,\r\n    chartData?: any\r\n  ): HTMLLegendPlugin {\r\n    const chartLegendService = this;\r\n    return {\r\n      id: \"htmlLegend\",\r\n      afterUpdate(chart: any) {\r\n        const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n        const flexDirection = isDoughnut ? \"column\" : \"row\";\r\n        const ul: HTMLUListElement = chartLegendService.getOrCreateLegendList(\r\n          legendContainer,\r\n          flexDirection\r\n        );\r\n        ul.style.margin = \"1.375rem 1.0625rem\";\r\n        while (ul.firstChild) {\r\n          ul.firstChild.remove();\r\n        }\r\n        const items: ChartItem[] =\r\n          chart.options.plugins.legend.labels.generateLabels(chart);\r\n        items.forEach((item: ChartItem): void => {\r\n          const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n          const index: number = isDoughnut ? item.index : item.datasetIndex;\r\n          const li: HTMLElement =\r\n            chartLegendService.createHtmlLegendListElement(\r\n              chart,\r\n              selectMode,\r\n              index\r\n            );\r\n          if (isDoughnut) {\r\n            const isOthersElement: boolean = index + 1 === maxValueToDisplay;\r\n            li.style.marginTop = \"12px\";\r\n            if (isOthersElement) {\r\n              li.style.position = \"relative\";\r\n            }\r\n          } else {\r\n            li.style.marginRight = \"10px\";\r\n          }\r\n          li.style.width = \"max-content\";\r\n          li.style.cursor = \"pointer\";\r\n          let liContent: HTMLElement;\r\n          if (!selectMode.value) {\r\n            liContent = chartLegendService.createLegendElementWithPatterns(\r\n              item,\r\n              chart,\r\n              onHoverIndex,\r\n              disableAccessibility,\r\n              patternsColors,\r\n              patternsList,\r\n              enableHoverFeature\r\n            );\r\n          } else {\r\n            liContent = chartLegendService.createLegendElementWithCheckbox(\r\n              chart,\r\n              item,\r\n              selectMode,\r\n              onHoverIndex,\r\n              patternsColors,\r\n              enableHoverFeature\r\n            );\r\n          }\r\n          liContent.style.boxSizing = \"border-box\";\r\n          li.appendChild(liContent);\r\n          li.appendChild(chartLegendService.createHtmlLegendItemText(item));\r\n          if (\r\n            isDoughnut &&\r\n            maxValueToDisplay &&\r\n            chartLegendService.hasOthersTooltipToDisplay(\r\n              chartData,\r\n              maxValueToDisplay,\r\n              index\r\n            )\r\n          ) {\r\n            li.appendChild(\r\n              chartLegendService.createTooltipAndItsIcon(\r\n                chartData,\r\n                maxValueToDisplay\r\n              )\r\n            );\r\n          }\r\n          ul.appendChild(li);\r\n        });\r\n      },\r\n    };\r\n  }\r\n\r\n  public hasOthersTooltipToDisplay(\r\n    doughnutData: any,\r\n    maxValueToDisplay: number,\r\n    index: number\r\n  ) {\r\n    return (\r\n      doughnutData.data.length > maxValueToDisplay &&\r\n      index === maxValueToDisplay - 1\r\n    );\r\n  }\r\n\r\n  public getOrCreateLegendList(\r\n    legendContainer: BehaviorSubject<HTMLElement | null>,\r\n    flexDirection: string\r\n  ): HTMLUListElement {\r\n    let listContainer = legendContainer?.value?.querySelector(\"ul\");\r\n    if (!listContainer) {\r\n      listContainer = document.createElement(\"ul\");\r\n      listContainer.style.display = \"flex\";\r\n      listContainer.style.flexDirection = flexDirection;\r\n      listContainer.style.margin = \"0\";\r\n      listContainer.style.padding = \"0\";\r\n      legendContainer.value?.appendChild(listContainer);\r\n    }\r\n    return listContainer;\r\n  }\r\n\r\n  public createHtmlLegendListElement(\r\n    chart: Chart,\r\n    selectMode: BehaviorSubject<boolean>,\r\n    elementIndex: number\r\n  ) {\r\n    const li: HTMLElement = document.createElement(\"li\");\r\n    li.style.alignItems = \"center\";\r\n    li.style.cursor = selectMode.value ? \"\" : \"pointer\";\r\n    li.style.display = \"flex\";\r\n    li.style.flexDirection = \"row\";\r\n    li.setAttribute(\"data-test-id\", `legend-item-${elementIndex}`);\r\n    li.onclick = () => {\r\n      if (!selectMode.value) {\r\n        this.hideAllButThis(chart, elementIndex, selectMode);\r\n        chart.update();\r\n      } else {\r\n        this.switchItemVisibility(chart, elementIndex, selectMode);\r\n      }\r\n    };\r\n    return li;\r\n  }\r\n\r\n  public hideAllButThis(\r\n    chart: Chart,\r\n    elementIndex: number,\r\n    selectMode: BehaviorSubject<boolean>\r\n  ) {\r\n    if (!selectMode.value) {\r\n      const dataSets: unknown[] = this.getChartsData(chart);\r\n      selectMode.next(true);\r\n      dataSets.forEach((_data, index) => {\r\n        if (index !== elementIndex) {\r\n          this.switchItemVisibility(chart, index);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public switchItemVisibility(\r\n    chart: Chart,\r\n    elementIndex: number,\r\n    selectMode?: BehaviorSubject<boolean>\r\n  ): void {\r\n    if (this.isMonoDataSetChart(chart)) {\r\n      chart.toggleDataVisibility(elementIndex);\r\n    } else {\r\n      chart.setDatasetVisibility(\r\n        elementIndex,\r\n        !chart.isDatasetVisible(elementIndex)\r\n      );\r\n    }\r\n\r\n    if (selectMode && this.allDataVisible(chart)) {\r\n      selectMode.next(false);\r\n    }\r\n    chart.update();\r\n  }\r\n\r\n  public createLegendElementWithPatterns(\r\n    item: ChartItem,\r\n    chart: Chart,\r\n    onHoverIndex: BehaviorSubject<any>,\r\n    disableAccessibility: boolean,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    enableHoverFeature: boolean\r\n  ): HTMLElement {\r\n    const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n    const index: number = isDoughnut ? item.index : item.datasetIndex;\r\n    const img: HTMLImageElement = new Image();\r\n    const boxSpan: HTMLElement = this.createHtmlLegendLine(\r\n      item,\r\n      chart.config.type\r\n    );\r\n    const pattern: CanvasPattern = patternsList[index](\r\n      false,\r\n      patternsColors[index],\r\n      disableAccessibility\r\n    );\r\n    const patternCanvas: HTMLCanvasElement =\r\n      this.patternService.getPatternCanvas(pattern);\r\n    img.src = patternCanvas.toDataURL();\r\n    boxSpan.style.background = `url(${img.src})`;\r\n    boxSpan.style.backgroundSize = \"cover\";\r\n    boxSpan.style.borderColor = patternsColors[index];\r\n    boxSpan.style.borderWidth = LEGEND_BOX_BORDER;\r\n\r\n    if (enableHoverFeature) {\r\n      boxSpan.onmouseover = (): void => {\r\n        isDoughnut\r\n          ? onHoverIndex.next(index)\r\n          : onHoverIndex.next({\r\n              ...onHoverIndex.value,\r\n              dataSetIndex: index,\r\n            });\r\n      };\r\n      boxSpan.onmouseleave = (): void => {\r\n        onHoverIndex.next(null);\r\n      };\r\n    }\r\n    return boxSpan;\r\n  }\r\n\r\n  public createHtmlLegendLine(\r\n    item: ChartItem,\r\n    type: string | undefined\r\n  ): HTMLDivElement {\r\n    const boxSpan = document.createElement(\"div\");\r\n    if (type !== \"doughnut\") {\r\n      boxSpan.style.background = \"rgba(0, 0, 0, 0.1)\";\r\n      boxSpan.style.borderColor = item.strokeStyle;\r\n      boxSpan.style.borderWidth = LEGEND_BOX_BORDER;\r\n    }\r\n    boxSpan.style.borderRadius = \"5px\";\r\n    boxSpan.style.borderStyle = \"solid\";\r\n    boxSpan.style.display = \"flex\";\r\n    boxSpan.style.justifyContent = \"center\";\r\n    boxSpan.style.alignItems = \"center\";\r\n    boxSpan.style.minWidth = LEGEND_BOX_SIZE;\r\n    boxSpan.style.marginRight = LEGEND_LABEL_LEFT_MARGIN;\r\n    boxSpan.style.minHeight = LEGEND_BOX_SIZE;\r\n    return boxSpan;\r\n  }\r\n\r\n  public createLegendElementWithCheckbox(\r\n    chart: Chart,\r\n    item: ChartItem,\r\n    selectMode: BehaviorSubject<boolean>,\r\n    onHoverIndex: BehaviorSubject<any>,\r\n    patternsColors: string[],\r\n    enableHoverFeature: boolean\r\n  ): HTMLElement {\r\n    const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n    const index: number = isDoughnut ? item.index : item.datasetIndex;\r\n    const checkbox: HTMLElement = this.createLegendCheckbox(\r\n      chart,\r\n      item,\r\n      patternsColors\r\n    );\r\n    const labels = chart.config.data.labels;\r\n    const allCheckBoxesVisible: boolean = labels.every((_, index: number) =>\r\n      chart.getDataVisibility(index)\r\n    );\r\n    if (allCheckBoxesVisible) {\r\n      if (isDoughnut) {\r\n        selectMode.next(false);\r\n        onHoverIndex.next(-1);\r\n      }\r\n      return checkbox;\r\n    }\r\n    if (enableHoverFeature) {\r\n      checkbox.onmouseover = (): void => {\r\n        isDoughnut\r\n          ? onHoverIndex.next(index)\r\n          : onHoverIndex.next({\r\n              ...onHoverIndex.value,\r\n              dataSetIndex: index,\r\n            });\r\n        chart.update();\r\n      };\r\n      checkbox.onmouseleave = (): void => {\r\n        isDoughnut\r\n          ? onHoverIndex.next(null)\r\n          : onHoverIndex.next({\r\n              ...onHoverIndex.value,\r\n              dataSetIndex: -1,\r\n            });\r\n        chart.update();\r\n      };\r\n    }\r\n    return checkbox;\r\n  }\r\n\r\n  public createLegendCheckbox(\r\n    chart: Chart,\r\n    item: ChartItem,\r\n    patternsColors: string[]\r\n  ): any {\r\n    const isDoughnut: boolean = chart.config.type === \"doughnut\";\r\n    const index: number = isDoughnut ? item.index : item.datasetIndex;\r\n    const checkbox = document.createElement(\"input\");\r\n    checkbox.setAttribute(\"type\", \"checkbox\");\r\n    checkbox.setAttribute(\"data-test-id\", `legend-checkbox-${index}`);\r\n    const isDataSetVisible = this.isChartDataVisible(chart, index);\r\n    const patternColor = patternsColors ? patternsColors[index] : undefined;\r\n    this.addCheckboxStyle(\r\n      isDataSetVisible,\r\n      item,\r\n      checkbox,\r\n      patternColor as string\r\n    );\r\n    return checkbox;\r\n  }\r\n\r\n  public addCheckboxStyle(\r\n    isDataSetVisible: boolean,\r\n    item: ChartItem,\r\n    checkbox: Element,\r\n    patternColor: string\r\n  ): void {\r\n    let backgroundColor = \"#fff\";\r\n    let borderColor = \"#666\";\r\n    if (isDataSetVisible) {\r\n      //Default white for patterns chart\r\n      backgroundColor = this.isDefaultWhiteColor(item.strokeStyle)\r\n        ? patternColor\r\n        : item.strokeStyle;\r\n      borderColor = this.isDefaultWhiteColor(item.strokeStyle)\r\n        ? patternColor\r\n        : item.strokeStyle;\r\n      checkbox.setAttribute(\"checked\", \"\" + isDataSetVisible);\r\n    }\r\n    checkbox.setAttribute(\"class\", \"mc-checkbox__input\");\r\n    checkbox.setAttribute(\r\n      \"style\",\r\n      `background-color: ${backgroundColor};\r\n      min-width: ${LEGEND_BOX_SIZE};\r\n      min-height: ${LEGEND_BOX_SIZE};\r\n      margin-right: ${LEGEND_LABEL_LEFT_MARGIN};\r\n      border-color: ${borderColor};`\r\n    );\r\n  }\r\n\r\n  public createHtmlLegendItemText(item: ChartItem): HTMLParagraphElement {\r\n    const textContainer = document.createElement(\"p\");\r\n    textContainer.style.color = item.fontColor;\r\n    textContainer.style.fontSize = `${LEGEND_FONT_SIZE}px`;\r\n    textContainer.style.margin = \"0\";\r\n    textContainer.style.padding = \"0\";\r\n\r\n    const text = document.createTextNode(item.text);\r\n    textContainer.appendChild(text);\r\n    return textContainer;\r\n  }\r\n\r\n  public createTooltipAndItsIcon(\r\n    doughnutData: any,\r\n    maxValueToDisplay: number\r\n  ): HTMLDivElement {\r\n    const iconTopWrapper = document.createElement(\"div\");\r\n    const iconWrapper = document.createElement(\"div\");\r\n    const icon = document.createElement(\"img\");\r\n    iconTopWrapper.style.position = \"absolute\";\r\n    iconTopWrapper.style.right = \"-32px\";\r\n    icon.src = \"src/assets/icons/Navigation_Notification_Question_24px.svg\";\r\n    icon.style.top = \"0\";\r\n    icon.style.width = \"1.5rem\";\r\n    icon.style.filter =\r\n      \"invert(38%) sepia(19%) saturate(18%) hue-rotate(337deg) brightness(97%) contrast(85%)\";\r\n    iconWrapper.style.position = \"relative\";\r\n    iconWrapper.style.display = \"flex\";\r\n    const tooltip = this.createLegendOthersTooltip(\r\n      doughnutData,\r\n      maxValueToDisplay\r\n    );\r\n    icon.onmouseover = () => {\r\n      (iconWrapper.firstElementChild as HTMLElement).style.visibility =\r\n        \"visible\";\r\n    };\r\n    icon.onmouseleave = () => {\r\n      (iconWrapper.firstElementChild as HTMLElement).style.visibility =\r\n        \"hidden\";\r\n    };\r\n    iconTopWrapper.appendChild(iconWrapper);\r\n    iconWrapper.appendChild(tooltip);\r\n    iconWrapper.appendChild(icon);\r\n    return iconTopWrapper;\r\n  }\r\n\r\n  private createLegendOthersTooltip(\r\n    doughnutData: any,\r\n    maxValueToDisplay: number\r\n  ): HTMLDivElement {\r\n    const tooltip = document.createElement(\"div\");\r\n    tooltip.style.visibility = \"hidden\";\r\n    tooltip.style.position = \"absolute\";\r\n    tooltip.style.zIndex = \"10\";\r\n    tooltip.style.width = \"350px\";\r\n    tooltip.style.bottom = \"100%\";\r\n    tooltip.style.left = \"50%\";\r\n    tooltip.style.marginLeft = \"-150px\";\r\n    tooltip.style.background = \"#FFFFFF\";\r\n    tooltip.style.boxShadow = \"0px 1px 5px rgba(0, 0, 0, 0.2)\";\r\n    tooltip.style.borderRadius = \"0.5rem\";\r\n    tooltip.style.fontSize = \"14px\";\r\n    tooltip.style.overflow = \"hidden\";\r\n    this.addOthersTooltipLines(doughnutData, maxValueToDisplay, tooltip);\r\n    return tooltip;\r\n  }\r\n\r\n  private addOthersTooltipLines(\r\n    doughnutData: any,\r\n    maxValueToDisplay: number,\r\n    tooltip: HTMLDivElement\r\n  ): void {\r\n    const startIndex = maxValueToDisplay - 1;\r\n    doughnutData.data\r\n      .slice(startIndex)\r\n      .forEach((_ignore: any, index: number) => {\r\n        const dataIndex = startIndex + index;\r\n        const textWrapper = document.createElement(\"div\");\r\n        textWrapper.style.display = \"flex\";\r\n        textWrapper.style.justifyContent = \"space-between\";\r\n        textWrapper.style.padding = \"0.5rem\";\r\n        textWrapper.style.border = \"1px solid #CCCCCC\";\r\n        const label = document.createElement(\"span\");\r\n        label.appendChild(\r\n          document.createTextNode(doughnutData.labels[dataIndex])\r\n        );\r\n        const value = document.createElement(\"span\");\r\n        value.appendChild(\r\n          document.createTextNode(\r\n            this.formatUtilitiesService.formatValueAndRate(\r\n              doughnutData,\r\n              dataIndex\r\n            )\r\n          )\r\n        );\r\n        textWrapper.appendChild(label);\r\n        textWrapper.appendChild(value);\r\n        tooltip.appendChild(textWrapper);\r\n      });\r\n  }\r\n\r\n  private getChartsData(chart: any): unknown[] {\r\n    let dataSets: unknown[] = chart.config.data.datasets;\r\n    if (this.isMonoDataSetChart(chart)) {\r\n      dataSets = chart.config.data.datasets[0].data;\r\n    }\r\n    return dataSets;\r\n  }\r\n\r\n  private isMonoDataSetChart(chart: Chart): boolean {\r\n    const { type } = chart.config;\r\n    return type === \"pie\" || type === \"doughnut\";\r\n  }\r\n\r\n  private allDataVisible(chart: Chart): boolean {\r\n    let allVisible = true;\r\n    const chartsData: unknown[] = this.getChartsData(chart);\r\n    chartsData.forEach((_data, dataIndex) => {\r\n      allVisible = allVisible && this.isChartDataVisible(chart, dataIndex);\r\n    });\r\n    return allVisible;\r\n  }\r\n\r\n  private isChartDataVisible(chart: Chart, dataIndex: number): boolean {\r\n    if (this.isMonoDataSetChart(chart)) {\r\n      return chart.getDataVisibility(dataIndex);\r\n    } else {\r\n      return chart.isDatasetVisible(dataIndex);\r\n    }\r\n  }\r\n\r\n  private isDefaultWhiteColor(color: string): boolean {\r\n    return color === \"#00000000\";\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "patternService",
                        "type": "PatternService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formatUtilitiesService",
                        "type": "FormatUtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "patternService",
                        "type": "PatternService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formatUtilitiesService",
                        "type": "FormatUtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ColorFunctionsService",
            "id": "injectable-ColorFunctionsService-eb42482d520a114cd85316b8136ec86cd1c951a602b7624a6003418a6596c32e2b5b780c101ab2471d45f89b8453b067f9e769acc4da624a596051a3ca2a2aa3",
            "file": "src/services/color-function.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addAlpha",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "opacity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds alpha transparency to a color.\n",
                    "description": "<p>Adds alpha transparency to a color.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 210,
                                "end": 215,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "color"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 204,
                                "end": 209,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The color in hex format (e.g., &#39;#FF5733&#39;).</p>\n"
                        },
                        {
                            "name": {
                                "pos": 272,
                                "end": 279,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "opacity"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 266,
                                "end": 271,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The opacity value between 0 and 1.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 322,
                                "end": 329,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The color with the added alpha value as a hex code (e.g., &#39;#FF573380&#39;).</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ColorFunctionsService {\r\n  constructor() {}\r\n\r\n  /**\r\n   * Adds alpha transparency to a color.\r\n   * @param color The color in hex format (e.g., '#FF5733').\r\n   * @param opacity The opacity value between 0 and 1.\r\n   * @returns The color with the added alpha value as a hex code (e.g., '#FF573380').\r\n   */\r\n  addAlpha(color: string, opacity: number): string {\r\n    const _opacity = Math.round(Math.min(Math.max(opacity || 1, 0), 1) * 255);\r\n    return color + _opacity.toString(16).toUpperCase();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DoughnutChartFunctionsService",
            "id": "injectable-DoughnutChartFunctionsService-def79e98bc0558ae91cbf60b9aaeea4225aa8f6e3744a12d8461e473298fdd07600a9f9263ee84f37aa2a7c2317a7790c49825dff2632a35882e4b48c0893e2e",
            "file": "src/services/doughnut-chart-functions.service.ts",
            "properties": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "new BehaviorSubject<CanvasPattern[] | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "centeredLabel",
                    "defaultValue": "new BehaviorSubject<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "doughnutRef",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "onHoverIndex",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "getBackgroundColor",
                    "args": [
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsList",
                            "type": "Array<CanvasPattern>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "enableHoverFeature",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CanvasPattern[]",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsList",
                            "type": "Array<CanvasPattern>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enableHoverFeature",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBorderColor",
                    "args": [
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "enableHoverFeature",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enableHoverFeature",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCenteredLabelPlugin",
                    "args": [
                        {
                            "name": "doughnutData",
                            "type": "DoughnutData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Plugin<doughnut>",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "doughnutData",
                            "type": "DoughnutData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDoughnutLabels",
                    "args": [
                        {
                            "name": "labels",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "DoughnutData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxValues",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "othersLabel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "labels",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "DoughnutData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxValues",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "othersLabel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormattedText",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOnHoverOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "(_ignore: unknown, activeElements: {}) => void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "groupDataAfterNthValue",
                    "args": [
                        {
                            "name": "data",
                            "type": "DoughnutData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxValues",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DoughnutData[]",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "DoughnutData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxValues",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "privateGetHtmlLegendPlugin",
                    "args": [
                        {
                            "name": "legendContainer",
                            "type": "BehaviorSubject<HTMLElement | null>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectMode",
                            "type": "BehaviorSubject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsList",
                            "type": "Array<CanvasPattern>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxValueToDisplay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "doughnutData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "enableHoverFeature",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Plugin<doughnut>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "legendContainer",
                            "type": "BehaviorSubject<HTMLElement | null>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectMode",
                            "type": "BehaviorSubject<boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsList",
                            "type": "Array<CanvasPattern>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxValueToDisplay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "doughnutData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enableHoverFeature",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { Chart, Plugin } from \"chart.js\";\r\nimport { DoughnutData } from \"../types/doughnut-data\";\r\nimport { FormatUtilitiesService } from \"./format-utilities.service\";\r\nimport { ColorFunctionsService } from \"./color-function.service\";\r\nimport { ChartLegendService } from \"./chart-legend.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class DoughnutChartFunctionsService {\r\n  doughnutRef = new BehaviorSubject<any>(null);\r\n  onHoverIndex = new BehaviorSubject<any>(null);\r\n  backgroundColor = new BehaviorSubject<CanvasPattern[] | null>(null);\r\n  centeredLabel = new BehaviorSubject<string | null>(null);\r\n\r\n  constructor(\r\n    private readonly formatUtilitiesService: FormatUtilitiesService,\r\n    private readonly colorFunctionsService: ColorFunctionsService,\r\n    private readonly chartLegendService: ChartLegendService\r\n  ) {}\r\n\r\n  public privateGetHtmlLegendPlugin(\r\n    legendContainer: BehaviorSubject<HTMLElement | null>,\r\n    selectMode: BehaviorSubject<boolean>,\r\n    disableAccessibility: boolean,\r\n    patternsColors: string[],\r\n    patternsList: Array<\r\n      (\r\n        hover: boolean,\r\n        color: string,\r\n        disableAccessibility: boolean\r\n      ) => CanvasPattern\r\n    >,\r\n    maxValueToDisplay: number,\r\n    doughnutData: any,\r\n    enableHoverFeature: boolean\r\n  ): Plugin<\"doughnut\"> {\r\n    return this.chartLegendService.getHtmlLegendPlugin(\r\n      legendContainer,\r\n      selectMode,\r\n      this.onHoverIndex,\r\n      disableAccessibility,\r\n      patternsColors,\r\n      patternsList,\r\n      enableHoverFeature,\r\n      maxValueToDisplay,\r\n      doughnutData\r\n    );\r\n  }\r\n\r\n  public getBackgroundColor(\r\n    patternsColors: string[],\r\n    patternsList: Array<\r\n      (\r\n        hover: boolean,\r\n        color: string,\r\n        disableAccessibility: boolean\r\n      ) => CanvasPattern\r\n    >,\r\n    disableAccessibility: boolean,\r\n    enableHoverFeature: boolean\r\n  ): CanvasPattern[] {\r\n    if (this.onHoverIndex.value !== null && enableHoverFeature) {\r\n      return patternsList.map((pattern, index) =>\r\n        this.onHoverIndex.value === index\r\n          ? pattern(false, patternsColors[index], disableAccessibility)\r\n          : pattern(true, patternsColors[index], disableAccessibility)\r\n      );\r\n    } else {\r\n      return patternsList.map((pattern, index) =>\r\n        pattern(false, patternsColors[index], disableAccessibility)\r\n      );\r\n    }\r\n  }\r\n\r\n  public getBorderColor(\r\n    patternsColors: string[],\r\n    enableHoverFeature: boolean\r\n  ): string[] {\r\n    if (this.onHoverIndex.value !== null && enableHoverFeature) {\r\n      return patternsColors.map((color, index) =>\r\n        this.onHoverIndex.value === index\r\n          ? color\r\n          : this.colorFunctionsService.addAlpha(color, 0.2)\r\n      );\r\n    } else {\r\n      return patternsColors;\r\n    }\r\n  }\r\n\r\n  public getOnHoverOptions() {\r\n    return (_ignore: unknown, activeElements: any[]): void => {\r\n      if (activeElements[0] !== undefined) {\r\n        this.onHoverIndex.next(activeElements[0].index);\r\n      } else {\r\n        this.onHoverIndex.next(null);\r\n      }\r\n    };\r\n  }\r\n\r\n  public getFormattedText(str: string): string {\r\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\r\n  }\r\n\r\n  public getCenteredLabelPlugin(\r\n    doughnutData: DoughnutData[]\r\n  ): Plugin<\"doughnut\"> {\r\n    return {\r\n      id: \"centeredLabelPlugin\",\r\n      afterDatasetDraw: (chart: Chart<\"doughnut\">) => {\r\n        const selectedIndexes: number[] = [];\r\n        const arcElements = chart.getDatasetMeta(0).data;\r\n\r\n        arcElements.forEach((arcElement: any, index: number) => {\r\n          if (arcElement.startAngle !== arcElement.endAngle) {\r\n            selectedIndexes.push(index);\r\n          }\r\n        });\r\n\r\n        const total = (chart as any)._metasets[0]?._dataset?.raw_value\r\n          ?.filter((_: any, index: number) => selectedIndexes.includes(index))\r\n          .reduce((acc: number, currentValue: any) => acc + currentValue, 0);\r\n        const unit = doughnutData[0].unit ?? \"\";\r\n        this.centeredLabel.next(\r\n          `${this.formatUtilitiesService.formatWithThousandsSeparators(\r\n            total\r\n          )}${unit}`\r\n        );\r\n      },\r\n    };\r\n  }\r\n\r\n  public getDoughnutLabels(\r\n    labels: string[],\r\n    data: DoughnutData[],\r\n    maxValues: number,\r\n    othersLabel: string\r\n  ): string[] {\r\n    let truncatedLabels = labels.slice(0);\r\n    let truncatedData = data.slice(0);\r\n\r\n    if (labels.length > maxValues) {\r\n      truncatedData = this.groupDataAfterNthValue(data, maxValues);\r\n      truncatedLabels = truncatedLabels.slice(0, maxValues - 1);\r\n      truncatedLabels.push(othersLabel);\r\n    }\r\n\r\n    return truncatedLabels.map((label: string, index: number) => {\r\n      const rate = truncatedData[index].rate;\r\n      return rate !== undefined\r\n        ? `${this.getFormattedText(\r\n            label\r\n          )} (${this.formatUtilitiesService.formatWithThousandsSeparators(\r\n            rate\r\n          )}%)`\r\n        : this.getFormattedText(label);\r\n    });\r\n  }\r\n\r\n  public groupDataAfterNthValue(\r\n    data: DoughnutData[],\r\n    maxValues: number\r\n  ): DoughnutData[] {\r\n    if (maxValues < 1) {\r\n      return data;\r\n    }\r\n    let truncatedData = data.slice(0);\r\n    if (data.length > maxValues) {\r\n      truncatedData = truncatedData.slice(0, maxValues);\r\n      truncatedData[maxValues - 1] = data.slice(maxValues).reduce(\r\n        (result, current) => {\r\n          if (result.rate && current.rate) {\r\n            result.rate += current.rate;\r\n          }\r\n          result.value += current.value;\r\n          return result;\r\n        },\r\n        { ...data[maxValues - 1] }\r\n      );\r\n    }\r\n    return truncatedData;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formatUtilitiesService",
                        "type": "FormatUtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colorFunctionsService",
                        "type": "ColorFunctionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chartLegendService",
                        "type": "ChartLegendService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "formatUtilitiesService",
                        "type": "FormatUtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colorFunctionsService",
                        "type": "ColorFunctionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartLegendService",
                        "type": "ChartLegendService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FormatUtilitiesService",
            "id": "injectable-FormatUtilitiesService-29782ff46be1fc50209a689fb76c9302f76ba01c890360a2bc486a5d6701fb3fd66e35e8e275a442db71a816889b9bf33ecb03041a1aa188cbb37627ca9f6be8",
            "file": "src/services/format-utilities.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "formatDecimalNumber",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormat a decimal number with two decimal places.\n",
                    "description": "<p>Format a decimal number with two decimal places.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2646,
                                "end": 2651,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "value"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2640,
                                "end": 2645,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The number to format</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2680,
                                "end": 2687,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Formatted decimal number</p>\n"
                        }
                    ]
                },
                {
                    "name": "formatTicks",
                    "args": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "unit",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormat ticks with optional unit.\n",
                    "description": "<p>Format ticks with optional unit.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 186,
                                "end": 189,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "val"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 180,
                                "end": 185,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The value to format</p>\n"
                        },
                        {
                            "name": {
                                "pos": 223,
                                "end": 227,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "unit"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 217,
                                "end": 222,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional unit to append to the value</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 272,
                                "end": 279,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Formatted string with thousands separators and unit (if provided)</p>\n"
                        }
                    ]
                },
                {
                    "name": "formatValueAndRate",
                    "args": [
                        {
                            "name": "doughnutData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormat value and rate for doughnut chart data.\n",
                    "description": "<p>Format value and rate for doughnut chart data.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2095,
                                "end": 2107,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "doughnutData"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2089,
                                "end": 2094,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The doughnut chart data object</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2152,
                                "end": 2161,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "dataIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2146,
                                "end": 2151,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The index of the data point</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2197,
                                "end": 2204,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Formatted string with value and rate percentage</p>\n"
                        }
                    ]
                },
                {
                    "name": "formatWithThousandsSeparators",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormat value with thousands separators.\n",
                    "description": "<p>Format value with thousands separators.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 635,
                                "end": 640,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "value"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 629,
                                "end": 634,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The value to format</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 668,
                                "end": 675,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Formatted value with K for thousands and M for millions</p>\n"
                        }
                    ]
                },
                {
                    "name": "getPatternIndexWithShift",
                    "args": [
                        {
                            "name": "dataSetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternShifting",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the shifted pattern index based on the dataset index.\n",
                    "description": "<p>Get the shifted pattern index based on the dataset index.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1666,
                                "end": 1678,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "dataSetIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1660,
                                "end": 1665,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The index of the dataset</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1717,
                                "end": 1732,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "patternShifting"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1711,
                                "end": 1716,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional pattern shift value</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1769,
                                "end": 1776,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The shifted pattern index</p>\n"
                        }
                    ]
                },
                {
                    "name": "numberWithThousandSeparators",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "unit",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFormat a number with thousand separators.\n",
                    "description": "<p>Format a number with thousand separators.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1168,
                                "end": 1173,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1162,
                                "end": 1167,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The value to format</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1207,
                                "end": 1211,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "unit"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1201,
                                "end": 1206,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional unit to append to the value</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1256,
                                "end": 1263,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Formatted number with thousand separators</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class FormatUtilitiesService {\r\n  /**\r\n   * Format ticks with optional unit.\r\n   * @param val The value to format\r\n   * @param unit Optional unit to append to the value\r\n   * @returns Formatted string with thousands separators and unit (if provided)\r\n   */\r\n  public formatTicks(val: number, unit?: string): string {\r\n    const fixedValue = parseInt(val.toFixed());\r\n    return `${new Intl.NumberFormat().format(fixedValue)}${\r\n      unit ? \" \" + unit : \"\"\r\n    }`;\r\n  }\r\n\r\n  /**\r\n   * Format value with thousands separators.\r\n   * @param value The value to format\r\n   * @returns Formatted value with K for thousands and M for millions\r\n   */\r\n  public formatWithThousandsSeparators(value: number): string {\r\n    if (Math.abs(Number(value)) >= 1.0e6) {\r\n      return this.formatDecimalNumber(value / 1.0e6) + \" M\";\r\n    } else if (Math.abs(Number(value)) >= 1.0e3) {\r\n      return this.formatDecimalNumber(value / 1.0e3) + \" K\";\r\n    } else {\r\n      return this.formatDecimalNumber(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Format a number with thousand separators.\r\n   * @param value The value to format\r\n   * @param unit Optional unit to append to the value\r\n   * @returns Formatted number with thousand separators\r\n   */\r\n  public numberWithThousandSeparators(value: string, unit?: string): string {\r\n    const x = parseFloat(value).toFixed(2);\r\n    const formattedValue = x.replace(/\\B(?=(\\d{3}){1,5}(?!\\d))/g, \" \");\r\n    return unit ? formattedValue + \" \" + unit : formattedValue;\r\n  }\r\n\r\n  /**\r\n   * Get the shifted pattern index based on the dataset index.\r\n   * @param dataSetIndex The index of the dataset\r\n   * @param patternShifting Optional pattern shift value\r\n   * @returns The shifted pattern index\r\n   */\r\n  public getPatternIndexWithShift(\r\n    dataSetIndex: number,\r\n    patternShifting?: number\r\n  ): number {\r\n    return patternShifting\r\n      ? (dataSetIndex + patternShifting) % 6\r\n      : dataSetIndex;\r\n  }\r\n\r\n  /**\r\n   * Format value and rate for doughnut chart data.\r\n   * @param doughnutData The doughnut chart data object\r\n   * @param dataIndex The index of the data point\r\n   * @returns Formatted string with value and rate percentage\r\n   */\r\n  public formatValueAndRate(doughnutData: any, dataIndex: number): string {\r\n    const textValue = `${this.formatWithThousandsSeparators(\r\n      doughnutData.data[dataIndex].value\r\n    )} (${this.formatWithThousandsSeparators(\r\n      doughnutData.data[dataIndex].rate\r\n    )}%)`;\r\n    return textValue;\r\n  }\r\n\r\n  /**\r\n   * Format a decimal number with two decimal places.\r\n   * @param value The number to format\r\n   * @returns Formatted decimal number\r\n   */\r\n  private formatDecimalNumber(value: number): string {\r\n    return new Intl.NumberFormat(\r\n      new Intl.NumberFormat().resolvedOptions().locale,\r\n      {\r\n        style: \"decimal\",\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2,\r\n      }\r\n    ).format(value);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GenericTooltipService",
            "id": "injectable-GenericTooltipService-1d6f5bc2e25615e98f32840803769c86171d94863c590894c3e47ed1487217db30b034609b6839f83e18788c2c2f25c4ba47686db608486138ddc94b7c8cb939",
            "file": "src/services/generic-tooltip.service.ts",
            "properties": [
                {
                    "name": "chartType",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "dataIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "datasetIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "dataToDisplay",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "patternShifting",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "titleLines",
                    "defaultValue": "[\"\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "xValue",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "yValue",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "methods": [
                {
                    "name": "addLegendToDom",
                    "args": [
                        {
                            "name": "innerHTMLtext",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "legendIconStyle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "legendIconInnerStyle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "style",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tooltipEl",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "datasetType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "innerHTMLtext",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "legendIconStyle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "legendIconInnerStyle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "style",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tooltipEl",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "datasetType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createCommonLegendSquareStyle",
                    "args": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLegendInnerStyle",
                    "args": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLegendStyle",
                    "args": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNewTooltipElement",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "createPatternLegendStyle",
                    "args": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTooltip",
                    "args": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "retrieveData",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "context",
                                    "type": "Context",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        },
                        {
                            "name": "tooltipInputElements",
                            "type": "TooltipElements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "retrieveData",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "context",
                                    "type": "Context",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tooltipInputElements",
                            "type": "TooltipElements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBody",
                    "args": [
                        {
                            "name": "bodyItem",
                            "type": "BodyItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 392,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bodyItem",
                            "type": "BodyItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleTooltipPosition",
                    "args": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tooltipModel",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tooltipEl",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tooltipModel",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tooltipEl",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "returnDetailsBarchartHtml",
                    "args": [
                        {
                            "name": "style",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "legendImage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "spanText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "style",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "legendImage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "spanText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "returnDoughnutHtml",
                    "args": [
                        {
                            "name": "legendImage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "spanText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "legendImage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "spanText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "returnRadarHtml",
                    "args": [
                        {
                            "name": "style",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "legendImage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "spanText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "style",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "legendImage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "spanText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setInnerHtmlAndPattern",
                    "args": [
                        {
                            "name": "tableRoot",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "innerHtml",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "datasetType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 348,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tableRoot",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "innerHtml",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsColors",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternsList",
                            "type": "(function)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "datasetType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setInnerHtmlToAdd",
                    "args": [
                        {
                            "name": "body",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "style",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "legendImage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "body",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "style",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "legendImage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { TooltipChartType } from \"../types/tooltip-chart-type\";\r\nimport { PatternService } from \"./pattern.service\";\r\n\r\ntype BodyItem = {\r\n  after: string[];\r\n  before: string[];\r\n  lines: string[];\r\n};\r\n\r\nexport type TooltipElements = {\r\n  chartType: TooltipChartType;\r\n  firstLineLabel?: string;\r\n  secondLineLabel?: string;\r\n  patternShifting?: number;\r\n};\r\n\r\ntype LabelColors = {\r\n  backgroundColor: unknown;\r\n  borderColor: unknown;\r\n};\r\n\r\ntype PointStyle = {\r\n  pointStyle: unknown;\r\n  rotation: number;\r\n};\r\n\r\nexport type Context = {\r\n  chart: {\r\n    canvas: HTMLElement;\r\n    tooltip?: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n  };\r\n  replay?: unknown;\r\n  tooltip: {\r\n    dataPoints: {\r\n      dataset?: {\r\n        type?: string;\r\n      };\r\n      dataIndex?: number;\r\n      datasetIndex?: number;\r\n      raw: any;\r\n    }[];\r\n    opacity: number;\r\n    body: {\r\n      after: string[];\r\n      before: string[];\r\n      lines: string[];\r\n    }[];\r\n    title: string[];\r\n    labelColors: Array<LabelColors>;\r\n    labelPointStyles: Array<PointStyle>;\r\n    caretX: number;\r\n    caretY: number;\r\n  };\r\n};\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class GenericTooltipService {\r\n  chartType = \"\";\r\n  datasetIndex = 0;\r\n  dataIndex = 0;\r\n  titleLines = [\"\"];\r\n  dataToDisplay = \"\";\r\n  xValue = \"\";\r\n  yValue = \"\";\r\n  patternShifting = 0;\r\n\r\n  constructor(private readonly patternService: PatternService) {}\r\n\r\n  createTooltip(\r\n    context: Context,\r\n    retrieveData: (context: Context) => string,\r\n    tooltipInputElements: TooltipElements,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    disableAccessibility: boolean = false\r\n  ) {\r\n    if (!context.tooltip.dataPoints) {\r\n      return;\r\n    }\r\n    this.datasetIndex = context.tooltip?.dataPoints[0].datasetIndex ?? 0;\r\n    this.dataIndex = context.tooltip.dataPoints[0].dataIndex ?? 0;\r\n    this.xValue = tooltipInputElements.firstLineLabel ?? \"\";\r\n    this.yValue = tooltipInputElements.secondLineLabel ?? \"\";\r\n    this.chartType = tooltipInputElements.chartType;\r\n    this.dataToDisplay = retrieveData(context);\r\n    this.patternShifting = tooltipInputElements.patternShifting ?? 0;\r\n    let tooltipEl: HTMLElement | null =\r\n      document.querySelector(\"#chartjs-tooltip\");\r\n\r\n    if (!tooltipEl) {\r\n      tooltipEl = this.createNewTooltipElement();\r\n    }\r\n\r\n    const tooltipModel = context.tooltip;\r\n\r\n    if (tooltipModel.opacity === 0) {\r\n      tooltipEl.style.opacity = \"0\";\r\n      return;\r\n    }\r\n\r\n    if (tooltipModel.body) {\r\n      this.titleLines = tooltipModel.title || [];\r\n      const bodyLines = tooltipModel.body.map(this.getBody);\r\n      let style = \"background: white;\";\r\n      style += \"border-bottom: 1px solid #CCCCCC;\";\r\n      style += \"border-radius: 5px;\";\r\n      style += \"padding: 10px 20px\";\r\n\r\n      const innerHtml = `<div style=\"${style}\" class=\"tooltipTitle\">`;\r\n      const body =\r\n        this.chartType === \"DOUGHNUT\"\r\n          ? [tooltipModel.title[0].split(\"(\")[0].trim()]\r\n          : bodyLines[0];\r\n      let legendIconStyle = \"\";\r\n      let legendInnerStyle = \"\";\r\n      const datasetType = context.tooltip?.dataPoints[0]?.dataset?.type;\r\n\r\n      if (this.chartType === \"RADAR\" || this.chartType === \"LINE_CHART\") {\r\n        legendIconStyle = this.createLegendStyle(context);\r\n        legendInnerStyle = this.createLegendInnerStyle(context);\r\n      } else if (\r\n        this.chartType === \"BAR_CHART\" ||\r\n        this.chartType === \"DETAILS_BAR_CHART\" ||\r\n        this.chartType === \"DOUGHNUT\"\r\n      ) {\r\n        legendIconStyle = this.createPatternLegendStyle(context);\r\n      } else if (this.chartType === \"MIXED_BAR_LINE_CHART\") {\r\n        if (datasetType === \"bar\") {\r\n          legendIconStyle = this.createPatternLegendStyle(context);\r\n        } else {\r\n          legendIconStyle = this.createLegendStyle(context);\r\n          legendInnerStyle = this.createLegendInnerStyle(context);\r\n        }\r\n      }\r\n\r\n      this.addLegendToDom(\r\n        innerHtml,\r\n        legendIconStyle,\r\n        legendInnerStyle,\r\n        body,\r\n        style,\r\n        tooltipEl,\r\n        patternsColors,\r\n        patternsList,\r\n        disableAccessibility,\r\n        datasetType\r\n      );\r\n    }\r\n\r\n    this.handleTooltipPosition(context, tooltipModel, tooltipEl);\r\n  }\r\n\r\n  protected handleTooltipPosition(\r\n    context: Context,\r\n    tooltipModel: { caretX: number; caretY: number },\r\n    tooltipEl: HTMLElement\r\n  ) {\r\n    const position = context.chart.canvas.getBoundingClientRect();\r\n    const screenWidth = window.innerWidth;\r\n    const left = position.left + window.scrollX + tooltipModel.caretX;\r\n    const top = position.top + window.scrollY + tooltipModel.caretY;\r\n\r\n    tooltipEl.style.left = left + \"px\";\r\n    tooltipEl.style.top = top + \"px\";\r\n    tooltipEl.style.height = \"auto\";\r\n    tooltipEl.style.minWidth = \"17rem\";\r\n    tooltipEl.style.opacity = \"1\";\r\n    tooltipEl.style.position = \"absolute\";\r\n    tooltipEl.style.zIndex = \"99\";\r\n    tooltipEl.style.backgroundColor = \"white\";\r\n    tooltipEl.style.pointerEvents = \"none\";\r\n\r\n    if (tooltipEl.getBoundingClientRect().width + left > screenWidth) {\r\n      tooltipEl.style.left =\r\n        left - tooltipEl.getBoundingClientRect().width + \"px\";\r\n    }\r\n  }\r\n\r\n  protected createNewTooltipElement() {\r\n    const tooltipEl = document.createElement(\"div\");\r\n    tooltipEl.id = \"chartjs-tooltip\";\r\n    tooltipEl.style.backgroundColor = \"white\";\r\n    tooltipEl.style.borderRadius = \"5px\";\r\n    tooltipEl.style.transition = \"opacity .5s\";\r\n    tooltipEl.style.boxShadow = \"0px 1px 5px rgba(0, 0, 0, 0.2)\";\r\n    tooltipEl.innerHTML = '<div class=\"tooltipCtn\"></div>';\r\n    document.body.appendChild(tooltipEl);\r\n    return tooltipEl;\r\n  }\r\n\r\n  private createPatternLegendStyle(context: Context) {\r\n    return this.createCommonLegendSquareStyle(context);\r\n  }\r\n\r\n  private createLegendStyle(context: Context) {\r\n    let legendIconStyle = `background-color:${context.tooltip.labelColors[0].backgroundColor}`;\r\n    legendIconStyle += this.createCommonLegendSquareStyle(context);\r\n    return legendIconStyle;\r\n  }\r\n\r\n  private createCommonLegendSquareStyle(context: Context): string {\r\n    let style = `;border: 2px solid ${context.tooltip.labelColors[0].borderColor}`;\r\n    style += \";min-height: 20px\";\r\n    style += \";min-width: 20px\";\r\n    style += \";border-radius: 5px\";\r\n    style += \";margin-right: 10px\";\r\n    style += \";display: flex\";\r\n    style += \";align-items: center\";\r\n    style += \";justify-content: center\";\r\n    style += \";background: rgba(0, 0, 0, 0.1);\";\r\n    return style;\r\n  }\r\n\r\n  createLegendInnerStyle(context: Context): string {\r\n    let legendIconInnerStyle = \"height: 12px\";\r\n    legendIconInnerStyle += \";width: 12px\";\r\n    legendIconInnerStyle += \";background-color: #FFF\";\r\n    legendIconInnerStyle += `;border: 2px solid ${context.tooltip.labelColors[0].borderColor};`;\r\n\r\n    if (context.tooltip.labelPointStyles[0].pointStyle === \"circle\") {\r\n      legendIconInnerStyle += \"border-radius: 25px;\";\r\n    } else if (context.tooltip.labelPointStyles[0].pointStyle === \"rectRot\") {\r\n      legendIconInnerStyle += \"transform: rotate(45deg);\";\r\n    }\r\n    return legendIconInnerStyle;\r\n  }\r\n\r\n  private addLegendToDom(\r\n    innerHTMLtext: string,\r\n    legendIconStyle: string,\r\n    legendIconInnerStyle: string,\r\n    body: Array<string>,\r\n    style: string,\r\n    tooltipEl: HTMLElement,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    disableAccessibility: boolean = false,\r\n    datasetType?: string\r\n  ) {\r\n    let innerHtml = innerHTMLtext;\r\n    let legendImage = `<div class=\"legendIcon\" style=\"${legendIconStyle}\">`;\r\n    const legendSubImage = `<div style=\"${legendIconInnerStyle}\"></div>`;\r\n    legendImage += `${legendSubImage}</div>`;\r\n\r\n    const innerHtmlToAdd = this.setInnerHtmlToAdd(body, style, legendImage);\r\n    innerHtml += innerHtmlToAdd;\r\n    const tableRoot: HTMLElement | null =\r\n      tooltipEl?.querySelector(\".tooltipCtn\");\r\n    if (tableRoot?.innerHTML != null) {\r\n      datasetType\r\n        ? this.setInnerHtmlAndPattern(\r\n            tableRoot,\r\n            innerHtml,\r\n            patternsColors,\r\n            patternsList,\r\n            disableAccessibility,\r\n            datasetType\r\n          )\r\n        : this.setInnerHtmlAndPattern(\r\n            tableRoot,\r\n            innerHtml,\r\n            patternsColors,\r\n            patternsList,\r\n            disableAccessibility\r\n          );\r\n    }\r\n  }\r\n\r\n  setInnerHtmlToAdd(body: Array<string>, style: string, legendImage: string) {\r\n    const legendText = body[0].split(\":\")[0];\r\n    const fontProperties = \"font-family: Arial; font-size: 16px\";\r\n    const spanText = `<span style=\"${fontProperties}\">${legendText}</span>`;\r\n    if (this.chartType === \"RADAR\") {\r\n      return this.returnRadarHtml(style, legendImage, spanText);\r\n    } else if (this.chartType === \"DOUGHNUT\") {\r\n      return this.returnDoughnutHtml(legendImage, spanText);\r\n    } else {\r\n      return this.returnDetailsBarchartHtml(style, legendImage, spanText);\r\n    }\r\n  }\r\n\r\n  returnDoughnutHtml(legendImage: string, spanText: string) {\r\n    const fontProperties = \"font-family: Arial; font-size: 16px\";\r\n    const legendText = `<span style=\"${fontProperties}\">${\r\n      spanText.split(\"(\")[0]\r\n    }</span>`;\r\n    let doughnutHtml = `<div style=\"${fontProperties}; display: flex; align-items: center; justify-content: space-between\">`;\r\n    doughnutHtml += `<div style=\"display:flex; align-items: center;\" >${\r\n      legendImage + legendText\r\n    }</div>`;\r\n    doughnutHtml += `<div style=\"${fontProperties}; margin-left:3rem;\">${this.dataToDisplay}</div>`;\r\n    doughnutHtml += \"</div></div>\";\r\n    return doughnutHtml;\r\n  }\r\n\r\n  returnRadarHtml(style: string, legendImage: string, spanText: string) {\r\n    const fontProperties = \"font-family: Arial; font-size: 16px\";\r\n    let radarHtml = `<div style=\"${fontProperties}; display: flex; align-items: center;\">${\r\n      legendImage + spanText\r\n    }</div>`;\r\n    radarHtml += \"</div>\";\r\n    radarHtml += `<div style=\"${fontProperties}; ${style}; border: none; display:flex; justify-content: space-between;\">`;\r\n    radarHtml += `<div>${this.titleLines[0]}</div>`;\r\n    radarHtml += `<div style=\"margin-left: 20px;\">${this.dataToDisplay}</div>`;\r\n    radarHtml += \"</div>\";\r\n    radarHtml += \"</div><div>\";\r\n\r\n    return radarHtml;\r\n  }\r\n\r\n  returnDetailsBarchartHtml(\r\n    style: string,\r\n    legendImage: string,\r\n    spanText: string\r\n  ) {\r\n    const fontProperties = \"font-family: Arial; font-size: 16px\";\r\n    let barChartHtml = `<div style=\"${fontProperties}; display: flex; align-items: center;\">${\r\n      legendImage + spanText\r\n    }</div>`;\r\n    barChartHtml += \"</div>\";\r\n    barChartHtml += `<div style=\"${fontProperties}; ${style}; display:flex; justify-content: space-between;\">`;\r\n    barChartHtml += `<div>${this.xValue}</div>`;\r\n    barChartHtml += `<div style=\"margin-left: 20px;\">${this.titleLines[0]}</div>`;\r\n    barChartHtml += \"</div>\";\r\n\r\n    barChartHtml += `<div style=\"${fontProperties}; ${style}; border-: none; display:flex; justify-content: space-between;\">`;\r\n    barChartHtml += `<div>${this.yValue}</div>`;\r\n    barChartHtml += `<div style=\"margin-left: 20px;\">${this.dataToDisplay}</div>`;\r\n    barChartHtml += \"</div>\";\r\n\r\n    return barChartHtml;\r\n  }\r\n\r\n  setInnerHtmlAndPattern(\r\n    tableRoot: HTMLElement,\r\n    innerHtml: string,\r\n    patternsColors: string[],\r\n    patternsList: ((\r\n      hover: boolean,\r\n      color: string,\r\n      disableAccessibility: boolean\r\n    ) => CanvasPattern)[],\r\n    disableAccessibility: boolean = false,\r\n    datasetType?: string\r\n  ) {\r\n    tableRoot.innerHTML = innerHtml;\r\n    const legendIconHtml = document.querySelector(\".legendIcon\") as HTMLElement;\r\n    const img: HTMLImageElement = new Image();\r\n\r\n    let index: number;\r\n\r\n    if (this.chartType === \"DOUGHNUT\") {\r\n      index = this.dataIndex + 1;\r\n    } else {\r\n      index = this.datasetIndex + 1;\r\n    }\r\n    const patternIndex = this.patternService.getPatternIndexWithShift(\r\n      index,\r\n      this.patternShifting\r\n    );\r\n    if (\r\n      this.chartType !== \"LINE_CHART\" &&\r\n      this.chartType !== \"RADAR\" &&\r\n      datasetType !== \"line\"\r\n    ) {\r\n      const pattern: CanvasPattern = patternsList[patternIndex - 1](\r\n        false,\r\n        patternsColors[patternIndex - 1],\r\n        disableAccessibility\r\n      );\r\n      const patternCanvas: HTMLCanvasElement =\r\n        this.patternService.getPatternCanvas(pattern, 22, 22);\r\n      img.src = patternCanvas.toDataURL();\r\n      legendIconHtml.style.backgroundImage = `url(${img.src})`;\r\n    }\r\n  }\r\n\r\n  getBody(bodyItem: BodyItem) {\r\n    return bodyItem.lines;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "patternService",
                        "type": "PatternService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "patternService",
                        "type": "PatternService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PatternService",
            "id": "injectable-PatternService-ab4b6bc57a4b06b40ee0ab80401585cefa059a9e52f045ea1905cec387b345235b3931bf9e30a3be2c4eb097a77451785b2ad01ddf574fe7ab9712b77e17b8eb",
            "file": "src/services/pattern.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getPatternCanvas",
                    "args": [
                        {
                            "name": "pattern",
                            "type": "CanvasPattern",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "width",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "50"
                        },
                        {
                            "name": "height",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "50"
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLCanvasElement",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pattern",
                            "type": "CanvasPattern",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "width",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "50",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "height",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "50",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPatternIndexWithShift",
                    "args": [
                        {
                            "name": "dataSetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patternShifting",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataSetIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patternShifting",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class PatternService {\r\n  constructor() {}\r\n\r\n  getPatternCanvas(\r\n    pattern: CanvasPattern,\r\n    width = 50,\r\n    height = 50\r\n  ): HTMLCanvasElement {\r\n    const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\r\n    const ctx: CanvasRenderingContext2D | null = canvas.getContext(\"2d\");\r\n    if (!ctx) {\r\n      return canvas;\r\n    }\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    ctx.fillStyle = pattern;\r\n    ctx.fillRect(0, 0, width, height);\r\n    return canvas;\r\n  }\r\n\r\n  getPatternIndexWithShift(\r\n    dataSetIndex: number,\r\n    patternShifting?: number\r\n  ): number {\r\n    return (\r\n      (patternShifting ? dataSetIndex + patternShifting : dataSetIndex) % 6\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-0a46c7c8f55712003defd575f30da5e65a68afb946850aaba3bb0c59a6b9c771800f689027239068e638552d18f5fce2f635b47dfb011abf794dd0cb5327e7c7",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "<h1>Welcome to {{ title }}!</h1>\n<moz-angular-doughnut\n  [labels]=\"labels\"\n  [data]=\"data\"\n  [maxValues]=\"3\"\n></moz-angular-doughnut>\n<router-outlet />\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[\r\n    {\r\n      value: 2771824.19,\r\n      unit: \"€\",\r\n      rate: 30.186240355262925,\r\n    },\r\n    {\r\n      value: 1715453.65,\r\n      unit: \"€\",\r\n      rate: 18.68195550931139,\r\n    },\r\n    {\r\n      value: 1651575.28,\r\n      unit: \"€\",\r\n      rate: 17.986295287685856,\r\n    },\r\n    {\r\n      value: 1168958.3,\r\n      unit: \"€\",\r\n      rate: 12.730409214402426,\r\n    },\r\n    {\r\n      value: 949837.87,\r\n      unit: \"€\",\r\n      rate: 10.34410275579238,\r\n    },\r\n    {\r\n      value: 924760.17,\r\n      unit: \"€\",\r\n      rate: 10.070996877545035,\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "labels",
                    "defaultValue": "[\r\n    \"Data One\",\r\n    \"Data Two\",\r\n    \"Data Three\",\r\n    \"Data Four\",\r\n    \"Data Five\",\r\n    \"Data Six\",\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "title",
                    "defaultValue": "\"@mozaic-ds/angular-chart\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "DoughnutComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\r\nimport { RouterOutlet } from \"@angular/router\";\r\nimport { DoughnutComponent } from \"../components/doughnut/doughnut.component\";\r\n\r\n@Component({\r\n  selector: \"app-root\",\r\n  standalone: true,\r\n  imports: [RouterOutlet, DoughnutComponent],\r\n  template: `\r\n    <h1>Welcome to {{ title }}!</h1>\r\n    <moz-angular-doughnut\r\n      [labels]=\"labels\"\r\n      [data]=\"data\"\r\n      [maxValues]=\"3\"\r\n    ></moz-angular-doughnut>\r\n    <router-outlet />\r\n  `,\r\n  styles: [],\r\n})\r\nexport class AppComponent {\r\n  labels = [\r\n    \"Data One\",\r\n    \"Data Two\",\r\n    \"Data Three\",\r\n    \"Data Four\",\r\n    \"Data Five\",\r\n    \"Data Six\",\r\n  ];\r\n  data = [\r\n    {\r\n      value: 2771824.19,\r\n      unit: \"€\",\r\n      rate: 30.186240355262925,\r\n    },\r\n    {\r\n      value: 1715453.65,\r\n      unit: \"€\",\r\n      rate: 18.68195550931139,\r\n    },\r\n    {\r\n      value: 1651575.28,\r\n      unit: \"€\",\r\n      rate: 17.986295287685856,\r\n    },\r\n    {\r\n      value: 1168958.3,\r\n      unit: \"€\",\r\n      rate: 12.730409214402426,\r\n    },\r\n    {\r\n      value: 949837.87,\r\n      unit: \"€\",\r\n      rate: 10.34410275579238,\r\n    },\r\n    {\r\n      value: 924760.17,\r\n      unit: \"€\",\r\n      rate: 10.070996877545035,\r\n    },\r\n  ];\r\n  title = \"@mozaic-ds/angular-chart\";\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "BarChartComponent",
            "id": "component-BarChartComponent-203af2ee28de4bdb3927c545a91c9f3d9fdc64d8325496ade5d7b9a7fc63625780c8606680c3af682591112b9a3cb629b5a1737e9ee24400fa6cb93e1d7c817d",
            "file": "src/components/bar/bar-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "moz-ng-bar-chart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./bar-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "chartId",
                    "defaultValue": "\"radar-chart\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValue of the id attribute present on the <canvas> tag element the chart\n",
                    "description": "<p>Value of the id attribute present on the <canvas> tag element the chart</p>\n",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "colourSet",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUsed to choose the colour set of the charts as defined in the Figma prototypes.\n7 colour sets are currently defined:\n- Default 0 corresponds to the current one\n- 1 to 6 corresponds to the \"new\" [colour sets](https://www.figma.com/file/Hn6PyvnR385Ta0XN3KqOI9/04.-Dataviz---Documentation-(read-only)?type=design&node-id=1-69316&mode=design&t=sDytQ5BipsryWkuA-0)\nNote: All the sets are defined in /src/services/patterns/ChartDesign.ts\n",
                    "description": "<p>Used to choose the colour set of the charts as defined in the Figma prototypes.\n7 colour sets are currently defined:</p>\n<ul>\n<li>Default 0 corresponds to the current one</li>\n<li>1 to 6 corresponds to the &quot;new&quot; <a href=\"https://www.figma.com/file/Hn6PyvnR385Ta0XN3KqOI9/04.-Dataviz---Documentation-(read-only)?type=design&node-id=1-69316&mode=design&t=sDytQ5BipsryWkuA-0\">colour sets</a>\nNote: All the sets are defined in /src/services/patterns/ChartDesign.ts</li>\n</ul>\n",
                    "line": 87,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "datasets",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValue of the `datasets` key present in the `data` object passed to the Chart config\nIf it's the stacked barchart (stacked : true in props), each dataset may contain the stack it belongs. stack Zero if not defined\n",
                    "description": "<p>Value of the <code>datasets</code> key present in the <code>data</code> object passed to the Chart config\nIf it&#39;s the stacked barchart (stacked : true in props), each dataset may contain the stack it belongs. stack Zero if not defined</p>\n",
                    "line": 100,
                    "type": "BarData[]",
                    "decorators": []
                },
                {
                    "name": "disableAccessibility",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisable accessibility patterns\n",
                    "description": "<p>Disable accessibility patterns</p>\n",
                    "line": 130,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableHoverFeature",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnable hover feature (may cause strange behavior when used with width and height in %)\n",
                    "description": "<p>Enable hover feature (may cause strange behavior when used with width and height in %)</p>\n",
                    "line": 135,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "\"300px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValue of the `height` css property used to define the height of the <canvas> element\n",
                    "description": "<p>Value of the <code>height</code> css property used to define the height of the <canvas> element</p>\n",
                    "line": 110,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labels",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabels used to label the index axis (default x axes). See [Data structures documentation](https://www.chartjs.org/docs/latest/general/data-structures.html)\n",
                    "description": "<p>Labels used to label the index axis (default x axes). See <a href=\"https://www.chartjs.org/docs/latest/general/data-structures.html\">Data structures documentation</a></p>\n",
                    "line": 78,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "newPatternsOrder",
                    "defaultValue": "[0, 1, 2, 3, 4, 5]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n6 patterns exist and are not randomly given but follow the order defined in [patternsStandardList](/src/services/patterns/ChartDesign.ts)\nAdditionally, a pattern has only one possible colour per colour set as defined in the Figma prototype.\nIn some use cases, the chart may need to show a different orders of these patterns, this can be changed using the props newPatternsOrder\n",
                    "description": "<p>6 patterns exist and are not randomly given but follow the order defined in <a href=\"/src/services/patterns/ChartDesign.ts\">patternsStandardList</a>\nAdditionally, a pattern has only one possible colour per colour set as defined in the Figma prototype.\nIn some use cases, the chart may need to show a different orders of these patterns, this can be changed using the props newPatternsOrder</p>\n",
                    "line": 94,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "plugins",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValue of the `plugins` key passed to the Chart config\n",
                    "description": "<p>Value of the <code>plugins</code> key passed to the Chart config</p>\n",
                    "line": 120,
                    "type": "Plugin<bar>[]",
                    "decorators": []
                },
                {
                    "name": "stacked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nActivates \"stacked\" mode\n",
                    "description": "<p>Activates &quot;stacked&quot; mode</p>\n",
                    "line": 125,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "styles",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd custom CSS styles to the <canvas> element\n",
                    "description": "<p>Add custom CSS styles to the <canvas> element</p>\n",
                    "line": 115,
                    "type": "Partial<CSSStyleDeclaration>",
                    "decorators": []
                },
                {
                    "name": "tooltipFirstLineLabel",
                    "defaultValue": "\"content\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel of the first line in the Tooltip\n",
                    "description": "<p>Label of the first line in the Tooltip</p>\n",
                    "line": 150,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltipSecondLineLabel",
                    "defaultValue": "\"content2\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabel of the second line in the Tooltip\n",
                    "description": "<p>Label of the second line in the Tooltip</p>\n",
                    "line": 155,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "unit",
                    "defaultValue": "\"%\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnit of values on canvas Y axis\n",
                    "description": "<p>Unit of values on canvas Y axis</p>\n",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "\"400px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValue of the `width` css property used to define the width of the <canvas> element\n",
                    "description": "<p>Value of the <code>width</code> css property used to define the width of the <canvas> element</p>\n",
                    "line": 105,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "xAxisTitle",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nX axis title\n",
                    "description": "<p>X axis title</p>\n",
                    "line": 140,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "yAxisTitle",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nY axis title\n",
                    "description": "<p>Y axis title</p>\n",
                    "line": 145,
                    "type": "string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "barChartData",
                    "defaultValue": "{\r\n    labels: [],\r\n    datasets: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BarChartData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "barChartOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions<bar>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 157,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "barChartPlugins",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BarPlugin[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 159,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "colourSets",
                    "defaultValue": "chartDesign().colourSets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 161,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "legendContainer",
                    "defaultValue": "new BehaviorSubject<HTMLElement | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "legendContainerElementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'legendContainer', {read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "patternsStandardList",
                    "defaultValue": "chartDesign().patternsStandardList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 162,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "selectMode",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "xValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "yValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "disablePattern",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 313,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "enableHover",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getChartData",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "indexOfValueToHide",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isStacked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 326,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "indexOfValueToHide",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isStacked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChartLabels",
                    "args": [
                        {
                            "name": "indexOfValueToHide",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "indexOfValueToHide",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gettooltipContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 321,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getTooltipData",
                    "args": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 342,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "indexOfOthersLabelIfNull",
                    "args": [],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initializeChartOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patternsColors",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "patternsOrderedList",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 305,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgChartsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CheckboxModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  ViewChild,\r\n} from \"@angular/core\";\r\nimport { NgChartsModule } from \"ng2-charts\";\r\nimport {\r\n  Chart as ChartJS,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  BarElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  Plugin,\r\n  ChartOptions,\r\n} from \"chart.js\";\r\n\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { CheckboxModule } from \"@mozaic-ds/angular/adeo\";\r\nimport { BarChartData, BarData, BarPlugin } from \"../../types/bar-data\";\r\nimport chartDesign from \"../../patterns/chart-design\";\r\nimport { BarChartFunctionsService } from \"../../services/bar-chart-functions.service\";\r\nimport {\r\n  Context,\r\n  GenericTooltipService,\r\n} from \"../../services/generic-tooltip.service\";\r\nimport { FormatUtilitiesService } from \"../../services/format-utilities.service\";\r\nimport { TooltipChartType } from \"../../types/tooltip-chart-type\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\n\r\nChartJS.register(\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  BarElement,\r\n  CategoryScale,\r\n  LinearScale\r\n);\r\n\r\n@Component({\r\n  selector: \"moz-ng-bar-chart\",\r\n  standalone: true,\r\n  imports: [NgChartsModule, CommonModule, CheckboxModule],\r\n  templateUrl: \"./bar-chart.component.html\",\r\n  styleUrl: \"./bar-chart.component.scss\",\r\n})\r\nexport class BarChartComponent implements AfterViewInit {\r\n  @ViewChild(\"legendContainer\", { read: ElementRef })\r\n  legendContainerElementRef?: ElementRef;\r\n\r\n  selectMode = new BehaviorSubject<boolean>(false);\r\n  legendContainer = new BehaviorSubject<HTMLElement | null>(null);\r\n\r\n  public xValue?: string;\r\n  public yValue?: string;\r\n  public barChartData: BarChartData = {\r\n    labels: [],\r\n    datasets: [],\r\n  };\r\n\r\n  /**\r\n   * Value of the id attribute present on the <canvas> tag element the chart\r\n   */\r\n  @Input() chartId: string = \"radar-chart\";\r\n\r\n  /**\r\n   * Unit of values on canvas Y axis\r\n   */\r\n  @Input() unit: string = \"%\";\r\n\r\n  /**\r\n   * Labels used to label the index axis (default x axes). See [Data structures documentation](https://www.chartjs.org/docs/latest/general/data-structures.html)\r\n   */\r\n  @Input() labels: string[] = [];\r\n\r\n  /**\r\n   * Used to choose the colour set of the charts as defined in the Figma prototypes.\r\n   * 7 colour sets are currently defined:\r\n   * - Default 0 corresponds to the current one\r\n   * - 1 to 6 corresponds to the \"new\" [colour sets](https://www.figma.com/file/Hn6PyvnR385Ta0XN3KqOI9/04.-Dataviz---Documentation-(read-only)?type=design&node-id=1-69316&mode=design&t=sDytQ5BipsryWkuA-0)\r\n   * Note: All the sets are defined in /src/services/patterns/ChartDesign.ts\r\n   */\r\n  @Input() colourSet: number = 0;\r\n\r\n  /**\r\n   * 6 patterns exist and are not randomly given but follow the order defined in [patternsStandardList](/src/services/patterns/ChartDesign.ts)\r\n   * Additionally, a pattern has only one possible colour per colour set as defined in the Figma prototype.\r\n   * In some use cases, the chart may need to show a different orders of these patterns, this can be changed using the props newPatternsOrder\r\n   */\r\n  @Input() newPatternsOrder: number[] = [0, 1, 2, 3, 4, 5];\r\n\r\n  /**\r\n   * Value of the `datasets` key present in the `data` object passed to the Chart config\r\n   * If it's the stacked barchart (stacked : true in props), each dataset may contain the stack it belongs. stack Zero if not defined\r\n   */\r\n  @Input() datasets: BarData[] = [];\r\n\r\n  /**\r\n   * Value of the `width` css property used to define the width of the <canvas> element\r\n   */\r\n  @Input() width: string = \"400px\";\r\n\r\n  /**\r\n   * Value of the `height` css property used to define the height of the <canvas> element\r\n   */\r\n  @Input() height: string = \"300px\";\r\n\r\n  /**\r\n   * Add custom CSS styles to the <canvas> element\r\n   */\r\n  @Input() styles: Partial<CSSStyleDeclaration> = {};\r\n\r\n  /**\r\n   * Value of the `plugins` key passed to the Chart config\r\n   */\r\n  @Input() plugins: Plugin<\"bar\">[] = [];\r\n\r\n  /**\r\n   * Activates \"stacked\" mode\r\n   */\r\n  @Input() stacked: boolean = false;\r\n\r\n  /**\r\n   * Disable accessibility patterns\r\n   */\r\n  @Input() disableAccessibility: boolean = false;\r\n\r\n  /**\r\n   * Enable hover feature (may cause strange behavior when used with width and height in %)\r\n   */\r\n  @Input() enableHoverFeature: boolean = false;\r\n\r\n  /**\r\n   * X axis title\r\n   */\r\n  @Input() xAxisTitle: string | null = null;\r\n\r\n  /**\r\n   * Y axis title\r\n   */\r\n  @Input() yAxisTitle: string | null = null;\r\n\r\n  /**\r\n   * Label of the first line in the Tooltip\r\n   */\r\n  @Input() tooltipFirstLineLabel = \"content\";\r\n\r\n  /**\r\n   * Label of the second line in the Tooltip\r\n   */\r\n  @Input() tooltipSecondLineLabel = \"content2\";\r\n\r\n  public barChartOptions!: ChartOptions<\"bar\">;\r\n\r\n  public barChartPlugins: BarPlugin[] = [];\r\n\r\n  private readonly colourSets = chartDesign().colourSets;\r\n  private readonly patternsStandardList = chartDesign().patternsStandardList;\r\n\r\n  constructor(\r\n    private readonly barChartFunctionService: BarChartFunctionsService,\r\n    private readonly formatUtilitiesService: FormatUtilitiesService,\r\n    private readonly genericTooltipService: GenericTooltipService\r\n  ) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this.legendContainer.next(this.legendContainerElementRef?.nativeElement);\r\n    const chartsLabels = this.getChartLabels(this.indexOfOthersLabelIfNull());\r\n    this.gettooltipContent();\r\n    this.initializeChartOptions();\r\n    this.barChartData = {\r\n      labels: chartsLabels,\r\n      datasets: this.barChartFunctionService.getStackedDatasets(\r\n        this.datasets.map((dataset, index) => ({\r\n          data: this.getChartData(index, this.indexOfOthersLabelIfNull()),\r\n          label: this.datasets[index].label,\r\n          stack: dataset.stack ?? 0,\r\n        })),\r\n        this.stacked,\r\n        this.disableAccessibility,\r\n        this.patternsColors(),\r\n        this.patternsOrderedList(),\r\n        0\r\n      ),\r\n    };\r\n    this.barChartPlugins.push(\r\n      this.barChartFunctionService.privateGetHtmlLegendPlugin(\r\n        this.legendContainer,\r\n        this.selectMode,\r\n        this.disablePattern(),\r\n        this.patternsColors(),\r\n        this.patternsOrderedList(),\r\n        this.enableHover()\r\n      ) as unknown as BarPlugin\r\n    );\r\n  }\r\n\r\n  private initializeChartOptions(): void {\r\n    this.barChartOptions = {\r\n      elements: {\r\n        bar: {\r\n          borderSkipped: false,\r\n        },\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: false,\r\n        },\r\n        title: {\r\n          display: false,\r\n        },\r\n        tooltip: {\r\n          enabled: false,\r\n          external: (context: Context) => {\r\n            const dataIndex: number =\r\n              context.tooltip.dataPoints?.[0].dataIndex ?? 0;\r\n            if (!this.labels[dataIndex] || this.labels[dataIndex] === \"\") {\r\n              return;\r\n            }\r\n            this.genericTooltipService.createTooltip(\r\n              context,\r\n              this.getTooltipData.bind(this),\r\n              {\r\n                chartType: TooltipChartType.BAR_CHART,\r\n                firstLineLabel: this.xValue,\r\n                secondLineLabel: this.yValue,\r\n              },\r\n              this.patternsColors(),\r\n              this.patternsOrderedList(),\r\n              this.disableAccessibility\r\n            );\r\n          },\r\n        },\r\n      },\r\n      scales: {\r\n        x: {\r\n          stacked: this.stacked,\r\n          title: {\r\n            display: this.xAxisTitle !== null,\r\n            text: this.xAxisTitle ?? \"\",\r\n          },\r\n        },\r\n        y: {\r\n          stacked: this.stacked,\r\n          title: {\r\n            display: this.yAxisTitle !== null,\r\n            text: this.yAxisTitle ?? \"\",\r\n          },\r\n          ticks: {\r\n            callback: (val: string | number): string => {\r\n              return this.unit === \"%\"\r\n                ? this.formatUtilitiesService.formatTicks(\r\n                    val as number,\r\n                    this.unit\r\n                  )\r\n                : this.formatUtilitiesService.formatWithThousandsSeparators(\r\n                    val as number\r\n                  ) +\r\n                    \" \" +\r\n                    this.unit;\r\n            },\r\n          },\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  private getChartLabels(indexOfValueToHide: number | null): string[] {\r\n    const labels = Object.assign([], this.labels);\r\n    if (indexOfValueToHide) {\r\n      labels.splice(indexOfValueToHide, 1);\r\n    }\r\n\r\n    return labels.map((label: string) => label);\r\n  }\r\n\r\n  private indexOfOthersLabelIfNull(): number | null {\r\n    const labels = this.labels;\r\n    if (labels.includes(\"other\")) {\r\n      const index = labels.indexOf(\"other\");\r\n      if (\r\n        this.datasets[0].data[index].rate + \"\" === \"0\" &&\r\n        this.datasets[1].data[index].rate + \"\" === \"0\"\r\n      ) {\r\n        return index;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // computed to make the colors list reactive to the props\r\n  private patternsColors(): string[] {\r\n    return this.newPatternsOrder.length !== this.patternsStandardList.length\r\n      ? this.colourSets[this.colourSet]\r\n      : this.newPatternsOrder.map((id) => {\r\n          return this.colourSets[this.colourSet][id];\r\n        });\r\n  }\r\n\r\n  // computed to make the patterns list reactive to the props\r\n  private patternsOrderedList() {\r\n    return this.newPatternsOrder.length !== this.patternsStandardList.length\r\n      ? this.patternsStandardList\r\n      : this.newPatternsOrder.map((id) => {\r\n          return this.patternsStandardList[id];\r\n        });\r\n  }\r\n\r\n  private disablePattern(): boolean {\r\n    return this.disableAccessibility;\r\n  }\r\n\r\n  private enableHover(): boolean {\r\n    return this.enableHoverFeature;\r\n  }\r\n\r\n  private gettooltipContent(): void {\r\n    this.xValue = this.tooltipFirstLineLabel;\r\n    this.yValue = this.tooltipSecondLineLabel;\r\n  }\r\n\r\n  private getChartData(\r\n    index: number,\r\n    indexOfValueToHide: number | null,\r\n    isStacked: boolean = false\r\n  ): number[] {\r\n    const data = Object.assign([], this.datasets[index].data);\r\n    if (indexOfValueToHide) {\r\n      data.splice(indexOfValueToHide, 1);\r\n    }\r\n\r\n    return data.map(\r\n      (data: { rate?: number; amount?: number }) =>\r\n        (this.unit === \"%\" ? data.rate : data.amount) as number\r\n    );\r\n  }\r\n\r\n  private getTooltipData(context: Context): string {\r\n    const datasetIndex = context.tooltip.dataPoints[0].datasetIndex as number;\r\n    const dataIndex = context.tooltip.dataPoints[0].dataIndex as number;\r\n    const rate: string = context.tooltip.body[0].lines[0].split(\":\")[1];\r\n    const rawdata = this.datasets[datasetIndex].data[dataIndex];\r\n    const percent = rawdata.rate\r\n      ? parseFloat(rate.replace(\",\", \".\")).toFixed(2) + \"% \"\r\n      : \"\";\r\n    const amountUnit = rawdata.amountUnit ? rawdata.amountUnit : \"\";\r\n    const data = rawdata.amount\r\n      ? this.formatUtilitiesService.formatWithThousandsSeparators(\r\n          rawdata.amount\r\n        )\r\n      : \"\";\r\n    return percent + (percent && data ? \"/ \" : \"\") + data + amountUnit;\r\n  }\r\n}\r\n",
            "styleUrl": "./bar-chart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "barChartFunctionService",
                        "type": "BarChartFunctionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formatUtilitiesService",
                        "type": "FormatUtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "genericTooltipService",
                        "type": "GenericTooltipService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 162,
                "jsdoctags": [
                    {
                        "name": "barChartFunctionService",
                        "type": "BarChartFunctionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formatUtilitiesService",
                        "type": "FormatUtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "genericTooltipService",
                        "type": "GenericTooltipService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"main\" [ngStyle]=\"{ width: width, height: height }\">\r\n    <canvas\r\n      *ngIf=\"barChartData\"\r\n      baseChart\r\n      [data]=\"barChartData\"\r\n      [options]=\"barChartOptions\"\r\n      [plugins]=\"barChartPlugins\"\r\n      [type]=\"'bar'\"\r\n    >\r\n    </canvas>\r\n  </div>\r\n  <moz-checkbox style=\"display: none\"></moz-checkbox>\r\n  <div #legendContainer></div>\r\n</div>\r\n"
        },
        {
            "name": "DoughnutComponent",
            "id": "component-DoughnutComponent-50d052cc2df2bfe2ce45d76cd3fe5c29f66c209492b437da2b30f43aba08693481fb84238b056878de22b811a533a42abe512a5ad532ea3387887138c96c8b53",
            "file": "src/components/doughnut/doughnut.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "moz-angular-doughnut",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./doughnut.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "chartId",
                    "defaultValue": "\"doughnut-chart\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValue of the id attribute present on the <canvas> element containing the chart\n",
                    "description": "<p>Value of the id attribute present on the <canvas> element containing the chart</p>\n",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "colourSet",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUsed to choose the colour set of the charts as defined in the Figma prototypes.\n7 colour sets are currently defined:\n- Default 0 corresponds to the current one\n- 1 to 6 corresponds to the \"new\" [colour sets](https://www.figma.com/file/Hn6PyvnR385Ta0XN3KqOI9/04.-Dataviz---Documentation-(read-only)?type=design&node-id=1-69316&mode=design&t=sDytQ5BipsryWkuA-0)\nNote: All the sets are defined in /src/services/patterns/ChartDesign.ts\n",
                    "description": "<p>Used to choose the colour set of the charts as defined in the Figma prototypes.\n7 colour sets are currently defined:</p>\n<ul>\n<li>Default 0 corresponds to the current one</li>\n<li>1 to 6 corresponds to the &quot;new&quot; <a href=\"https://www.figma.com/file/Hn6PyvnR385Ta0XN3KqOI9/04.-Dataviz---Documentation-(read-only)?type=design&node-id=1-69316&mode=design&t=sDytQ5BipsryWkuA-0\">colour sets</a>\nNote: All the sets are defined in /src/services/patterns/ChartDesign.ts</li>\n</ul>\n",
                    "line": 97,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "cssClasses",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd custom CSS classes to the <canvas> element\n",
                    "description": "<p>Add custom CSS classes to the <canvas> element</p>\n",
                    "line": 73,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nData to be passed to Chart\n",
                    "description": "<p>Data to be passed to Chart</p>\n",
                    "line": 63,
                    "type": "DoughnutData[]",
                    "decorators": []
                },
                {
                    "name": "disableAccessibility",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisable accessibility patterns\n",
                    "description": "<p>Disable accessibility patterns</p>\n",
                    "line": 83,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableCenteredLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnable/Disable centered label in the middle of the <canvas> element\n",
                    "description": "<p>Enable/Disable centered label in the middle of the <canvas> element</p>\n",
                    "line": 78,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableHoverFeature",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnable hover feature (may cause strange behavior when used with width and height in %)\n",
                    "description": "<p>Enable hover feature (may cause strange behavior when used with width and height in %)</p>\n",
                    "line": 88,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "\"400px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValue of the `height` css property used to define the height of the <canvas> element\n",
                    "description": "<p>Value of the <code>height</code> css property used to define the height of the <canvas> element</p>\n",
                    "line": 114,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labels",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLabels used to label the index axis (default x axes). See [Data structures documentation](https://www.chartjs.org/docs/latest/general/data-structures.html)\n",
                    "description": "<p>Labels used to label the index axis (default x axes). See <a href=\"https://www.chartjs.org/docs/latest/general/data-structures.html\">Data structures documentation</a></p>\n",
                    "line": 68,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "maxValues",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMaximum number of data to be displayed in the Chart\n",
                    "description": "<p>Maximum number of data to be displayed in the Chart</p>\n",
                    "line": 119,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "newPatternsOrder",
                    "defaultValue": "[0, 1, 2, 3, 4, 5]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n6 patterns exist and are not randomly given but follow the order defined in [patternsStandardList](/src/services/patterns/ChartDesign.ts)\nAdditionally, a pattern has only one possible colour per colour set as defined in the Figma prototype.\nIn some use cases, the chart may need to show a different orders of these patterns, this can be changed using the props newPatternsOrder\n",
                    "description": "<p>6 patterns exist and are not randomly given but follow the order defined in <a href=\"/src/services/patterns/ChartDesign.ts\">patternsStandardList</a>\nAdditionally, a pattern has only one possible colour per colour set as defined in the Figma prototype.\nIn some use cases, the chart may need to show a different orders of these patterns, this can be changed using the props newPatternsOrder</p>\n",
                    "line": 104,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "othersLabel",
                    "defaultValue": "\"others\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValue of the 'others' label if maxValue is reached\n",
                    "description": "<p>Value of the &#39;others&#39; label if maxValue is reached</p>\n",
                    "line": 134,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "plugins",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValue of the `plugins` key passed to the Chart config\n",
                    "description": "<p>Value of the <code>plugins</code> key passed to the Chart config</p>\n",
                    "line": 129,
                    "type": "Plugin<doughnut>[]",
                    "decorators": []
                },
                {
                    "name": "styles",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd custom CSS styles to the <canvas> element\n",
                    "description": "<p>Add custom CSS styles to the <canvas> element</p>\n",
                    "line": 124,
                    "type": "Partial<CSSStyleDeclaration>",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "\"400px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValue of the `width` css property used to define the width of the <canvas> element\n",
                    "description": "<p>Value of the <code>width</code> css property used to define the width of the <canvas> element</p>\n",
                    "line": 109,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseChartDirective",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 136,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "BaseChartDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "colourSets",
                    "defaultValue": "chartDesign().colourSets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "doughnutChartData",
                    "defaultValue": "{\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        data: [],\r\n      },\r\n    ],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DoughnutChartData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 140,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "doughnutChartFunctionsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DoughnutChartFunctionsService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 178,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "doughnutChartOptions",
                    "defaultValue": "{\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n        position: \"bottom\",\r\n        align: \"start\",\r\n        labels: {\r\n          pointStyle: \"rectRounded\",\r\n          usePointStyle: true,\r\n        },\r\n      },\r\n      title: {\r\n        display: false,\r\n      },\r\n    },\r\n    spacing: 0,\r\n    cutout: \"70%\",\r\n    layout: {\r\n      padding: {\r\n        top: 50,\r\n        right: 50,\r\n        bottom: 50,\r\n        left: 50,\r\n      },\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions<doughnut>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 149,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "doughnutChartPlugins",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DoughnutPlugin[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 138,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "legendContainer",
                    "defaultValue": "new BehaviorSubject<HTMLElement | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "legendContainerElementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'legendContainer', {read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "patternsStandardList",
                    "defaultValue": "chartDesign().patternsStandardList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "selectMode",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "disablePattern",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "enableHover",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getTooltipData",
                    "args": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 314,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "Context",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupedData",
                    "args": [],
                    "optional": false,
                    "returnType": "DoughnutData[]",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patternsColors",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "patternsOrderedList",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 306,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgChartsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CheckboxModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  ViewChild,\r\n} from \"@angular/core\";\r\nimport { NgChartsModule, BaseChartDirective } from \"ng2-charts\";\r\nimport {\r\n  Chart as ChartJS,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ArcElement,\r\n  Plugin,\r\n  ChartOptions,\r\n  ActiveElement,\r\n  ChartEvent,\r\n} from \"chart.js\";\r\nimport chartDesign from \"../../patterns/chart-design\";\r\nimport {\r\n  DoughnutChartData,\r\n  DoughnutData,\r\n  DoughnutPlugin,\r\n} from \"../../types/doughnut-data\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport {\r\n  Context,\r\n  GenericTooltipService,\r\n} from \"../../services/generic-tooltip.service\";\r\nimport { TooltipChartType } from \"../../types/tooltip-chart-type\";\r\nimport { DoughnutChartFunctionsService } from \"../../services/doughnut-chart-functions.service\";\r\nimport { FormatUtilitiesService } from \"../../services/format-utilities.service\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { CheckboxModule } from \"@mozaic-ds/angular/adeo\";\r\nChartJS.register(Title, Tooltip, Legend, ArcElement);\r\n\r\n@Component({\r\n  selector: \"moz-angular-doughnut\",\r\n  standalone: true,\r\n  imports: [NgChartsModule, CommonModule, CheckboxModule],\r\n  templateUrl: \"./doughnut.component.html\",\r\n  styleUrl: \"./doughnut.component.scss\",\r\n})\r\nexport class DoughnutComponent implements AfterViewInit {\r\n  @ViewChild(\"legendContainer\", { read: ElementRef })\r\n  legendContainerElementRef?: ElementRef;\r\n\r\n  selectMode = new BehaviorSubject<boolean>(false);\r\n  legendContainer = new BehaviorSubject<HTMLElement | null>(null);\r\n\r\n  colourSets = chartDesign().colourSets;\r\n  patternsStandardList = chartDesign().patternsStandardList;\r\n\r\n  /**\r\n   * Value of the id attribute present on the <canvas> element containing the chart\r\n   */\r\n  @Input() chartId: string = \"doughnut-chart\";\r\n\r\n  /**\r\n   * Data to be passed to Chart\r\n   */\r\n  @Input() data: DoughnutData[] = [];\r\n\r\n  /**\r\n   * Labels used to label the index axis (default x axes). See [Data structures documentation](https://www.chartjs.org/docs/latest/general/data-structures.html)\r\n   */\r\n  @Input() labels: string[] = [];\r\n\r\n  /**\r\n   * Add custom CSS classes to the <canvas> element\r\n   */\r\n  @Input() cssClasses: string | undefined = undefined;\r\n\r\n  /**\r\n   * Enable/Disable centered label in the middle of the <canvas> element\r\n   */\r\n  @Input() enableCenteredLabel: boolean = true;\r\n\r\n  /**\r\n   * Disable accessibility patterns\r\n   */\r\n  @Input() disableAccessibility: boolean = false;\r\n\r\n  /**\r\n   * Enable hover feature (may cause strange behavior when used with width and height in %)\r\n   */\r\n  @Input() enableHoverFeature: boolean = false;\r\n\r\n  /**\r\n   * Used to choose the colour set of the charts as defined in the Figma prototypes.\r\n   * 7 colour sets are currently defined:\r\n   * - Default 0 corresponds to the current one\r\n   * - 1 to 6 corresponds to the \"new\" [colour sets](https://www.figma.com/file/Hn6PyvnR385Ta0XN3KqOI9/04.-Dataviz---Documentation-(read-only)?type=design&node-id=1-69316&mode=design&t=sDytQ5BipsryWkuA-0)\r\n   * Note: All the sets are defined in /src/services/patterns/ChartDesign.ts\r\n   */\r\n  @Input() colourSet: number = 0;\r\n\r\n  /**\r\n   * 6 patterns exist and are not randomly given but follow the order defined in [patternsStandardList](/src/services/patterns/ChartDesign.ts)\r\n   * Additionally, a pattern has only one possible colour per colour set as defined in the Figma prototype.\r\n   * In some use cases, the chart may need to show a different orders of these patterns, this can be changed using the props newPatternsOrder\r\n   */\r\n  @Input() newPatternsOrder: number[] = [0, 1, 2, 3, 4, 5];\r\n\r\n  /**\r\n   * Value of the `width` css property used to define the width of the <canvas> element\r\n   */\r\n  @Input() width: string = \"400px\";\r\n\r\n  /**\r\n   * Value of the `height` css property used to define the height of the <canvas> element\r\n   */\r\n  @Input() height: string = \"400px\";\r\n\r\n  /**\r\n   * Maximum number of data to be displayed in the Chart\r\n   */\r\n  @Input() maxValues: number = 5;\r\n\r\n  /**\r\n   * Add custom CSS styles to the <canvas> element\r\n   */\r\n  @Input() styles: Partial<CSSStyleDeclaration> = {};\r\n\r\n  /**\r\n   * Value of the `plugins` key passed to the Chart config\r\n   */\r\n  @Input() plugins: Plugin<\"doughnut\">[] = [];\r\n\r\n  /**\r\n   * Value of the 'others' label if maxValue is reached\r\n   */\r\n  @Input() othersLabel: string = \"others\";\r\n\r\n  @ViewChild(BaseChartDirective) chart?: BaseChartDirective;\r\n\r\n  public doughnutChartPlugins: DoughnutPlugin[] = [];\r\n\r\n  public doughnutChartData: DoughnutChartData = {\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        data: [],\r\n      },\r\n    ],\r\n  };\r\n\r\n  public doughnutChartOptions: ChartOptions<\"doughnut\"> = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n        position: \"bottom\",\r\n        align: \"start\",\r\n        labels: {\r\n          pointStyle: \"rectRounded\",\r\n          usePointStyle: true,\r\n        },\r\n      },\r\n      title: {\r\n        display: false,\r\n      },\r\n    },\r\n    spacing: 0,\r\n    cutout: \"70%\",\r\n    layout: {\r\n      padding: {\r\n        top: 50,\r\n        right: 50,\r\n        bottom: 50,\r\n        left: 50,\r\n      },\r\n    },\r\n  };\r\n\r\n  constructor(\r\n    public readonly doughnutChartFunctionsService: DoughnutChartFunctionsService,\r\n    private readonly genericTooltipService: GenericTooltipService,\r\n    private readonly formatUtilitiesService: FormatUtilitiesService\r\n  ) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.legendContainer.next(this.legendContainerElementRef?.nativeElement);\r\n    const doughnutDataAndLabels = {\r\n      data: this.data,\r\n      labels: this.labels,\r\n    };\r\n\r\n    this.doughnutChartOptions.onHover = (\r\n      event: ChartEvent,\r\n      elements: ActiveElement[],\r\n      chart\r\n    ) => {\r\n      if (chart) {\r\n        if (this.enableHover()) {\r\n          this.doughnutChartFunctionsService.getOnHoverOptions();\r\n        }\r\n        chart.canvas.style.cursor =\r\n          elements.length !== 0 ? \"pointer\" : \"default\";\r\n      }\r\n    };\r\n\r\n    this.doughnutChartPlugins.push(\r\n      this.doughnutChartFunctionsService.privateGetHtmlLegendPlugin(\r\n        this.legendContainer,\r\n        this.selectMode,\r\n        this.disablePattern(),\r\n        this.patternsColors(),\r\n        this.patternsOrderedList(),\r\n        this.maxValues,\r\n        doughnutDataAndLabels,\r\n        this.enableHover()\r\n      ) as unknown as DoughnutPlugin,\r\n      this.doughnutChartFunctionsService.getCenteredLabelPlugin(this.data)\r\n    );\r\n\r\n    this.doughnutChartData = {\r\n      labels: this.doughnutChartFunctionsService.getDoughnutLabels(\r\n        this.labels,\r\n        this.data,\r\n        this.maxValues,\r\n        this.othersLabel\r\n      ),\r\n      datasets: [\r\n        {\r\n          data: this.groupedData().map((x) => x.value),\r\n          backgroundColor:\r\n            this.doughnutChartFunctionsService.getBackgroundColor(\r\n              this.patternsColors(),\r\n              this.patternsOrderedList(),\r\n              this.disableAccessibility,\r\n              this.enableHoverFeature\r\n            ),\r\n          borderColor: this.doughnutChartFunctionsService.getBorderColor(\r\n            this.patternsColors(),\r\n            this.enableHoverFeature\r\n          ),\r\n        },\r\n      ],\r\n    };\r\n    (this.doughnutChartData as any).datasets[0].raw_value =\r\n      this.groupedData().map((x) => x.value);\r\n    this.doughnutChartOptions.spacing = this.data.length * 2;\r\n    let animationFrameId: number | null = null;\r\n    this.doughnutChartFunctionsService.onHoverIndex.subscribe((index) => {\r\n      if (animationFrameId !== null) {\r\n        cancelAnimationFrame(animationFrameId);\r\n      }\r\n\r\n      animationFrameId = requestAnimationFrame(() => {\r\n        this.doughnutChartData.datasets[0].backgroundColor =\r\n          this.doughnutChartFunctionsService.getBackgroundColor(\r\n            this.patternsColors(),\r\n            this.patternsOrderedList(),\r\n            this.disableAccessibility,\r\n            this.enableHoverFeature\r\n          );\r\n        this.chart?.update();\r\n      });\r\n    });\r\n\r\n    this.doughnutChartOptions.plugins = {\r\n      ...this.doughnutChartOptions.plugins,\r\n      tooltip: {\r\n        enabled: false,\r\n        external: (context: Context) => {\r\n          this.genericTooltipService.createTooltip(\r\n            context,\r\n            this.getTooltipData.bind(this),\r\n            {\r\n              chartType: TooltipChartType.DOUGHNUT,\r\n            },\r\n            this.patternsColors(),\r\n            this.patternsOrderedList(),\r\n            this.disablePattern()\r\n          );\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  private disablePattern(): boolean {\r\n    return this.disableAccessibility;\r\n  }\r\n\r\n  private enableHover(): boolean {\r\n    return this.enableHoverFeature;\r\n  }\r\n\r\n  private groupedData(): DoughnutData[] {\r\n    return this.doughnutChartFunctionsService.groupDataAfterNthValue(\r\n      this.data,\r\n      this.maxValues\r\n    );\r\n  }\r\n\r\n  private patternsColors(): string[] {\r\n    return this.newPatternsOrder.length !== 6\r\n      ? this.colourSets[this.colourSet]\r\n      : this.newPatternsOrder.map((id) => {\r\n          return this.colourSets[this.colourSet][id];\r\n        });\r\n  }\r\n\r\n  private patternsOrderedList() {\r\n    return this.newPatternsOrder.length !== 6\r\n      ? this.patternsStandardList\r\n      : this.newPatternsOrder.map((id) => {\r\n          return this.patternsStandardList[id];\r\n        });\r\n  }\r\n\r\n  private getTooltipData(context: Context): string {\r\n    const dataIndex = context.tooltip.dataPoints[0].dataIndex as number;\r\n    const tooltipData = this.groupedData()[dataIndex];\r\n    let rate: string | undefined = undefined;\r\n    if (tooltipData.rate) {\r\n      rate = this.formatUtilitiesService.formatWithThousandsSeparators(\r\n        tooltipData.rate\r\n      );\r\n    }\r\n    const value = this.formatUtilitiesService.formatWithThousandsSeparators(\r\n      tooltipData.value\r\n    );\r\n    const unit = tooltipData.unit ?? \"\";\r\n    if (rate) {\r\n      return `${value}${unit} (${rate})%`;\r\n    } else {\r\n      return `${value}${unit}`;\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./doughnut.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "doughnutChartFunctionsService",
                        "type": "DoughnutChartFunctionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "genericTooltipService",
                        "type": "GenericTooltipService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formatUtilitiesService",
                        "type": "FormatUtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 175,
                "jsdoctags": [
                    {
                        "name": "doughnutChartFunctionsService",
                        "type": "DoughnutChartFunctionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "genericTooltipService",
                        "type": "GenericTooltipService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formatUtilitiesService",
                        "type": "FormatUtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"main\" [ngStyle]=\"{ width: width, height: height }\">\r\n    <canvas\r\n      baseChart\r\n      [data]=\"doughnutChartData\"\r\n      [options]=\"doughnutChartOptions\"\r\n      [plugins]=\"doughnutChartPlugins\"\r\n      [type]=\"'doughnut'\"\r\n    >\r\n    </canvas>\r\n    <span *ngIf=\"enableCenteredLabel\" class=\"centered-label\">\r\n      {{ doughnutChartFunctionsService.centeredLabel | async }}\r\n    </span>\r\n  </div>\r\n  <moz-checkbox style=\"display: none\"></moz-checkbox>\r\n  <div #legendContainer></div>\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\r\n}"
            },
            {
                "name": "LEGEND_BOX_BORDER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/services/chart-legend.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"2px\""
            },
            {
                "name": "LEGEND_BOX_POINT_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/services/chart-legend.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "6"
            },
            {
                "name": "LEGEND_BOX_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/services/chart-legend.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"22px\""
            },
            {
                "name": "LEGEND_FONT_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/services/chart-legend.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "14"
            },
            {
                "name": "LEGEND_LABEL_LEFT_MARGIN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/services/chart-legend.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"6px\""
            }
        ],
        "functions": [
            {
                "name": "PatternCircles",
                "file": "src/patterns/pattern-circles.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "hover",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "\"#095359\""
                    },
                    {
                        "name": "disableAccessibility",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    }
                ],
                "returnType": "CanvasPattern",
                "jsdoctags": [
                    {
                        "name": "hover",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "\"#095359\"",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "disableAccessibility",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "PatternDashedDiagonals",
                "file": "src/patterns/pattern-dashed-diagonals.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "hover",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "\"#F255A3\""
                    },
                    {
                        "name": "disableAccessibility",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    }
                ],
                "returnType": "CanvasPattern",
                "jsdoctags": [
                    {
                        "name": "hover",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "\"#F255A3\"",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "disableAccessibility",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "PatternDiagonals",
                "file": "src/patterns/pattern-diagonals.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "hover",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "\"#143666\""
                    },
                    {
                        "name": "disableAccessibility",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    }
                ],
                "returnType": "CanvasPattern",
                "jsdoctags": [
                    {
                        "name": "hover",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "\"#143666\"",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "disableAccessibility",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "PatternSquares",
                "file": "src/patterns/pattern-squares.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "hover",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "\"#A274FF\""
                    },
                    {
                        "name": "disableAccessibility",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    }
                ],
                "returnType": "CanvasPattern",
                "jsdoctags": [
                    {
                        "name": "hover",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "\"#A274FF\"",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "disableAccessibility",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "PatternVerticalLines",
                "file": "src/patterns/pattern-vertical-lines.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "hover",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "\"#8C1551\""
                    },
                    {
                        "name": "disableAccessibility",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    }
                ],
                "returnType": "CanvasPattern",
                "jsdoctags": [
                    {
                        "name": "hover",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "\"#8C1551\"",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "disableAccessibility",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "PatternZigzag",
                "file": "src/patterns/pattern-zigzag.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "hover",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "\"#00A3B2\""
                    },
                    {
                        "name": "disableAccessibility",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    }
                ],
                "returnType": "CanvasPattern",
                "jsdoctags": [
                    {
                        "name": "hover",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "\"#00A3B2\"",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "disableAccessibility",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "Unnamed function",
                "file": "src/patterns/chart-design.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            }
        ],
        "typealiases": [
            {
                "name": "AnyObject",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Record<string | any>",
                "file": "src/types/bar-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "AnyObject",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Record<string | any>",
                "file": "src/types/doughnut-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "BarChartData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ChartData<bar | number[]>",
                "file": "src/types/bar-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "BarPlugin",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Plugin<bar | AnyObject>",
                "file": "src/types/bar-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "BodyItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/services/generic-tooltip.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "Context",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/services/generic-tooltip.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "DoughnutChartData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ChartData<doughnut | number[]>",
                "file": "src/types/doughnut-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "DoughnutPlugin",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Plugin<doughnut | AnyObject>",
                "file": "src/types/doughnut-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "HTMLLegendPlugin",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Plugin<\"bar\" | \"doughnut\" | \"line\" | Record<string, any>>",
                "file": "src/types/chart.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "LabelColors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/services/generic-tooltip.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "PointStyle",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/services/generic-tooltip.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TooltipElements",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/services/generic-tooltip.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [
            {
                "name": "TooltipChartType",
                "childs": [
                    {
                        "name": "RADAR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RADAR"
                    },
                    {
                        "name": "BAR_CHART",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "BAR_CHART"
                    },
                    {
                        "name": "MIXED_BAR_LINE_CHART",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MIXED_BAR_LINE_CHART"
                    },
                    {
                        "name": "DETAILS_BAR_CHART",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DETAILS_BAR_CHART"
                    },
                    {
                        "name": "LINE_CHART",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "LINE_CHART"
                    },
                    {
                        "name": "DOUGHNUT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DOUGHNUT"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/types/tooltip-chart-type.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\r\n}"
                }
            ],
            "src/services/chart-legend.service.ts": [
                {
                    "name": "LEGEND_BOX_BORDER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/services/chart-legend.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"2px\""
                },
                {
                    "name": "LEGEND_BOX_POINT_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/services/chart-legend.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "6"
                },
                {
                    "name": "LEGEND_BOX_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/services/chart-legend.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"22px\""
                },
                {
                    "name": "LEGEND_FONT_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/services/chart-legend.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "14"
                },
                {
                    "name": "LEGEND_LABEL_LEFT_MARGIN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/services/chart-legend.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"6px\""
                }
            ]
        },
        "groupedFunctions": {
            "src/patterns/pattern-circles.ts": [
                {
                    "name": "PatternCircles",
                    "file": "src/patterns/pattern-circles.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "hover",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"#095359\""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "returnType": "CanvasPattern",
                    "jsdoctags": [
                        {
                            "name": "hover",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"#095359\"",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/patterns/pattern-dashed-diagonals.ts": [
                {
                    "name": "PatternDashedDiagonals",
                    "file": "src/patterns/pattern-dashed-diagonals.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "hover",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"#F255A3\""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "returnType": "CanvasPattern",
                    "jsdoctags": [
                        {
                            "name": "hover",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"#F255A3\"",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/patterns/pattern-diagonals.ts": [
                {
                    "name": "PatternDiagonals",
                    "file": "src/patterns/pattern-diagonals.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "hover",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"#143666\""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "returnType": "CanvasPattern",
                    "jsdoctags": [
                        {
                            "name": "hover",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"#143666\"",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/patterns/pattern-squares.ts": [
                {
                    "name": "PatternSquares",
                    "file": "src/patterns/pattern-squares.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "hover",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"#A274FF\""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "returnType": "CanvasPattern",
                    "jsdoctags": [
                        {
                            "name": "hover",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"#A274FF\"",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/patterns/pattern-vertical-lines.ts": [
                {
                    "name": "PatternVerticalLines",
                    "file": "src/patterns/pattern-vertical-lines.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "hover",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"#8C1551\""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "returnType": "CanvasPattern",
                    "jsdoctags": [
                        {
                            "name": "hover",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"#8C1551\"",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/patterns/pattern-zigzag.ts": [
                {
                    "name": "PatternZigzag",
                    "file": "src/patterns/pattern-zigzag.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "hover",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"#00A3B2\""
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "returnType": "CanvasPattern",
                    "jsdoctags": [
                        {
                            "name": "hover",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"#00A3B2\"",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/patterns/chart-design.ts": [
                {
                    "name": "Unnamed function",
                    "file": "src/patterns/chart-design.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {
            "src/types/tooltip-chart-type.ts": [
                {
                    "name": "TooltipChartType",
                    "childs": [
                        {
                            "name": "RADAR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RADAR"
                        },
                        {
                            "name": "BAR_CHART",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "BAR_CHART"
                        },
                        {
                            "name": "MIXED_BAR_LINE_CHART",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MIXED_BAR_LINE_CHART"
                        },
                        {
                            "name": "DETAILS_BAR_CHART",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DETAILS_BAR_CHART"
                        },
                        {
                            "name": "LINE_CHART",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "LINE_CHART"
                        },
                        {
                            "name": "DOUGHNUT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DOUGHNUT"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/types/tooltip-chart-type.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/types/bar-data.ts": [
                {
                    "name": "AnyObject",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Record<string | any>",
                    "file": "src/types/bar-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "BarChartData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ChartData<bar | number[]>",
                    "file": "src/types/bar-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "BarPlugin",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Plugin<bar | AnyObject>",
                    "file": "src/types/bar-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/types/doughnut-data.ts": [
                {
                    "name": "AnyObject",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Record<string | any>",
                    "file": "src/types/doughnut-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "DoughnutChartData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ChartData<doughnut | number[]>",
                    "file": "src/types/doughnut-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "DoughnutPlugin",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Plugin<doughnut | AnyObject>",
                    "file": "src/types/doughnut-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/services/generic-tooltip.service.ts": [
                {
                    "name": "BodyItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/services/generic-tooltip.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "Context",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/services/generic-tooltip.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "LabelColors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/services/generic-tooltip.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "PointStyle",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/services/generic-tooltip.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TooltipElements",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/services/generic-tooltip.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/types/chart.ts": [
                {
                    "name": "HTMLLegendPlugin",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Plugin<\"bar\" | \"doughnut\" | \"line\" | Record<string, any>>",
                    "file": "src/types/chart.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/bar/bar-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BarChartComponent",
                "coveragePercent": 42,
                "coverageCount": "17/40",
                "status": "medium"
            },
            {
                "filePath": "src/components/doughnut/doughnut.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DoughnutComponent",
                "coveragePercent": 44,
                "coverageCount": "15/34",
                "status": "medium"
            },
            {
                "filePath": "src/patterns/chart-design.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "Unnamed function",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/patterns/pattern-circles.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "PatternCircles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/patterns/pattern-dashed-diagonals.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "PatternDashedDiagonals",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/patterns/pattern-diagonals.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "PatternDiagonals",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/patterns/pattern-squares.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "PatternSquares",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/patterns/pattern-vertical-lines.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "PatternVerticalLines",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/patterns/pattern-zigzag.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "PatternZigzag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/bar-chart-functions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BarChartFunctionsService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/services/bar-chart-functions.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Dataset",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/services/chart-legend.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChartLegendService",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/services/chart-legend.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Chart",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/services/chart-legend.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChartItem",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/services/chart-legend.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LEGEND_BOX_BORDER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/chart-legend.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LEGEND_BOX_POINT_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/chart-legend.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LEGEND_BOX_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/chart-legend.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LEGEND_FONT_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/chart-legend.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LEGEND_LABEL_LEFT_MARGIN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/color-function.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorFunctionsService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/services/doughnut-chart-functions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DoughnutChartFunctionsService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/services/format-utilities.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormatUtilitiesService",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "src/services/generic-tooltip.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GenericTooltipService",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/services/generic-tooltip.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "BodyItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/generic-tooltip.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/generic-tooltip.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "LabelColors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/generic-tooltip.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "PointStyle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/generic-tooltip.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TooltipElements",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/pattern.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PatternService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/types/bar-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BarData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/types/bar-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataBarData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/types/bar-data.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AnyObject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/types/bar-data.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "BarChartData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/types/bar-data.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "BarPlugin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/types/chart.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChartData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/types/chart.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "HTMLLegendPlugin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/types/doughnut-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DoughnutData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/types/doughnut-data.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AnyObject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/types/doughnut-data.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "DoughnutChartData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/types/doughnut-data.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "DoughnutPlugin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}